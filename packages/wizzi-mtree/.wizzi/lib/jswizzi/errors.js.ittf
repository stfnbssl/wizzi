module
	kind jsfile

	import util
	var wizziUtils = require('@wizzi/utils')
	var f_verify = require('./functions/verify')
	+
    var pkgVersioned = ' (${wzCtx.name}.${wzCtx.version})'
    +
	var md = module.exports = {}
	+
	error( JsWizziRunner, message, node )
		set this.message = message + util.inspect(node.loc, {depth: null})
        set this.message += pkgVersioned

	error( InvalidVariableName, message )
		set this.message = message
        set this.message += pkgVersioned

	error( JsWizziSynthax, message, node )
		# loog 'JsWizziSynthax.message', message
		if f_verify.isObject(message) && message.lineNumber
			# In this case node = WizziJS source
			set this.message = "Synthax error. " + message.description + 
				\ ' at line ' + message.lineNumber +
				\ ' column ' + message.column +
				\ '\n' +
				\ getEsprimaErrorLines(message, node) +
				\ '\n'
			set this.errorLines = getEsprimaErrorLines(message, node, true)
		else
			set this.message = message
        set this.message += pkgVersioned
	
	# For
		# vars or functions undeclared
		# invalid values
	error( JsWizziType, message, node )
		set this.message = message
        set this.message += pkgVersioned

	#
		# params
		# { errorData
		#   @ row
		#   @ col
		#   @ description
		# string source
		# boolean json
		#
	set md.getErrorLines
		function
			param errorData
			param source
			param json

			# loog 'jswizzi.errors.getErrorLines.loc', 'calling getErrorLines', errorData

			var statements = source.split('\n')

			var start = Math.max(0, (errorData.row - 4))
			var end
				_ Math.min
					@ statements.length
					@ (errorData.row + 4)
			var ret
				[ 
        
			var parsedErrorLine = {}
			for var i = start; i < end; i++
				_ ret.push(formatLineNumber(i + 1) + ' ' + statements[i])
				if (i == errorData.row - 1)
					var col = errorData.pos || errorData.col
					_ ret.push(spaces(col + 4) + '^ ' + (errorData.description + '  <--- --- --- --- --- ERROR' || ''))
					set parsedErrorLine = parseScriptLine(statements[i])
					# loog 'jswizzi.errors.getErrorLines.statements[i])', statements[i]
			return json ? { lines: ret, parsedErrorLine: parsedErrorLine } : ret.join('\n')

	set md.esprimaNodeErrorLines
		function
			param description
			param node
			param source
			param json
            if node && node.loc
                # loog 'jswizzi.errors.esprimaNodeErrorLines.source', source
                # loog 'jswizzi.errors.esprimaNodeErrorLines.node.loc', node.loc, 'calling getErrorLines'
                return
                    $$ _ wizziUtils.errors.getErrorLines
					_ md.getErrorLines
                        {
                            @ row node.loc.start.line
                            @ col node.loc.start.column
                            @ description description
                        @ source
                        @ json
            else
                # loog 'jswizzi.errors.esprimaNodeErrorLines', 'node has no loc property', node
                return ['No data available']

	function getEsprimaErrorLines
        param esprimaException
		param source
		param json

		var statements = source.split('\n')

        var start = Math.max(0, (esprimaException.lineNumber - 4))
        var end
            _ Math.min
                @ statements.length
                @ (esprimaException.lineNumber + 4)
        var ret
            [ 
        
		for var i = start; i < end; i++
            _ ret.push(formatLineNumber(i + 1) + ' ' + statements[i])
            if (i == esprimaException.lineNumber - 1)
                var col = Math.max(0, esprimaException.column)
                _ ret.push(spaces(col + 4) + '^ ' + esprimaException.description)
        
		return json ? ret : ret.join('\n')

	function parseScriptLine
        param line
		var ndx = line.indexOf('//node:')
		# loog 'parseScriptLine', line, ndx, line[ndx+7], line[ndx+8]
		var state = 1  
		var ret
			{
				@ nodeId ''
		for var i=ndx+7; i<line.length; i++
			var ch = line[i]
			if state == 1
				if ch >= '0' && ch <= '9'
					set ret.nodeId = ret.nodeId + ch
				else
					# loog 'parseInt(ret.nodeId)', parseInt(ret.nodeId)
					set ret.nodeId = parseInt(ret.nodeId)
					set state = 2
		if state == 1
			set ret.nodeId = parseInt(ret.nodeId)
		return ret

	function spaces
        param num
		if num > 0 
		    return Array(num + 1).join(" ")
        else
            return ''
    
	function formatLineNumber
        param num
        if num > 999
            return num
        if num > 99
            return ('0' + num)
        if num > 9
            return ('00' + num)
        return ('000' + num)

