module 
    kind jsfile

	import util
	var stringify = require('json-stringify-safe')
	var verify = require('@wizzi/utils').verify
	var file = require('@wizzi/utils').file
	var inflect = require('i')(true)
    
    set module.exports
		{ 
			@ readFile
				function 
					param filePath
					param format
					try
						const data
							_ file.read
								@ filePath
						if format == "for-json-string"
							return 
								_ verify.replaceAll
									_ verify.replaceAll
										_ verify.replaceAll
											_ verify.replaceAll
												@ data
												@ '\n'
												@ ''
											@ '\r'
											@ ''
										@ '\\'
										@ '/'
									@ '"'
									@ '\\"'
						else
							return text
					catch ex
						return ex.message
			@ stringify
				function 
					param value
					param options
					param tabspaces
					if tabspaces
						return stringify(value, options, tabspaces)
					else
						return stringify(value)
			@ pluralize
				function 
					param str
					return inflect.pluralize(str)
			@ singularize
				function 
					param str
					return inflect.singularize(str)
			@ capitalize
				function 
					param str
					return 
						_ str.replace
							@ /(?:^|\s)\S/g
							function 
								param a
								return a.toUpperCase()
			@ camelize
				function 
					param str
					return inflect.camelize(str, false)
		
			@ camelCase
				function 
					param str
					return inflect.camelize(str, false)

			@ dasherize
				function 
					param str
					return inflect.dasherize(str, false)

			@ dashToCamelCase
				function 
					param str
					return verify.dashToCamelCase(str)

			@ underscore
				function 
					param str
					return inflect.underscore(str, false)

			@ titleize
				function 
					param str
					return inflect.titleize(str, false)

			@ tableize					
				function 
					param str
					return inflect.tableize(str, false)

			@ ordinalize					
				function 
					param str
					return inflect.ordinalize(str, false)

			@ escape
				function
					param value
					if verify.isNotEmpty(value)
						return 
							_ verify.replaceAll
								_ verify.replaceAll
									_ verify.replaceAll(value, "\\", "\\\\")
									@ '"'
									@ '\\"'
								@ "'"
								@ "\\'"
					else
						return value  
			@ isEmpty
				function
					param text
					return typeof text === 'string' && text.trim().length === 0
			@ isNotEmpty
				function
					param text
					return typeof text === 'string' && text.trim().length > 0
			@ isObject
				function
					param obj
					var type = typeof obj
					return type === 'function' || type === 'object' && !!obj
			@ isArray
				function
					param obj
					if Array.isArray
						return Array.isArray(obj)
					else
						return toString.call(obj) === '[object Array]'
			@ isString
				function
					param obj
					return toString.call(obj) === '[object String]'
			@ isNumber
				function
					param obj
					return toString.call(obj) === '[object Number]'
			@ isDate
				function
					param obj
					return toString.call(obj) === '[object Date]'
			@ isBoolean
				function
					param obj
					return typeof obj === "boolean" || obj instanceof Boolean
			@ isFunction
				function
					param obj
					return toString.call(obj) === '[object Function]'

			@ isUndefined
				function
					param obj
					return obj === void 0
			
            @ deinline
				function
					param text
					if this.isNotEmpty(text) == false
						return ''
					var
						decl len = text.length
						decl ch
						decl i
						decl ret = []
					for i=0; i<len; i++
						set ch = text[i]
						if ch === '¥'
							_ ret.push('\n')
						elif ch === '┐'
							_ ret.push('\r')
						elif ch === '└'
							_ ret.push('$')
						elif ch === '\t'
							_ ret.push('    ')
						else
							_ ret.push(ch)
					return ret.join('')				

			@ log
				function
					var args
						_ Array.prototype.slice.call
							@ arguments
							@ 0
					_ args.splice
						@ 0
						@ 0
						@ "=== jsWizzi:log => "
					_ console.log.apply
						@ null
						@ args

			@ inspect
				function
					param obj
					return util.inspect(obj, { depth: null})
			@ replace
				function
					param text
					param from
					param to
					return verify.replaceAll(text, from, to)
			@ abend
				function
					param message
					throw new Error(message)
			@ sort
				function
					param items
                    param prop
                    return
                        _ items.sort
                            function 
                                param a
                                param b
                                var xA = prop ? a[prop].toUpperCase() : a.toUpperCase()
                                var xB = prop ? b[prop].toUpperCase() : b.toUpperCase()
                                if xA < xB
                                    return -1
                                if xA > xB
                                    return 1
                                return 0
                    
			@ filter
				function
					param items
                    param prop
                    param value
                    return
                        _ items.filter
                            function
                                param a
                                return a[prop] === value
			@ unique
				function
					param items
                    var result = []
                    foreach item in items
                        if result.indexOf(item) < 0
                            _ result.push(item)
                    return result

			@ now_GMYHMS
				function
					var date = new Date()
					+ return date.getDate() + '/' +
						+ (date.getMonth() + 1) + '/' +
						+ date.getFullYear() + ':' +
						+ date.getHours() + ':' +
						+ date.getMinutes() + ':' +
						+ date.getSeconds();
			@ GMYHMS
				function
                    param date
					+ return date.getDate() + '/' +
						+ (date.getMonth() + 1) + '/' +
						+ date.getFullYear() + ':' +
						+ date.getHours() + ':' +
						+ date.getMinutes() + ':' +
						+ date.getSeconds();
			@ GMYHM
				function
                    param date
					+ return date.getDate() + '/' +
						+ (date.getMonth() + 1) + '/' +
						+ date.getFullYear() + ':' +
						+ date.getHours() + ':' +
						+ date.getMinutes()
			@ GMY
				function
                    param date
					+ return date.getDate() + '/' +
						+ (date.getMonth() + 1) + '/' +
						+ date.getFullYear()                    







