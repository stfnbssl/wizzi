module 
    kind jsfile

    var util = require('util')
	var assert = require('assert')
	var verify = require('@wizzi/utils').verify

    var md
        set module.exports =
            { 

    #
		# { item (Node)
		#    string name
		#    string value
		#    object parent
		#    [ children
	
	#
		# IttfCommands are nodes which name 
		# starts with the char "$"
		# The search go down to descendants
	
	set md.findIttfCommand
        function 
            param item
            param cmdname
            param cmdtype
			param startItem
            param multi

    		if (startItem && item.id === startItem.id) 
				
				# searching the hook for an append command
				# when descending from a parent we encounter startItem
				# or a sibling we skip it and its descendants
				return null
            
			# loog 'util.node.findIttfCommand', cmdtype, item.name, cmdname, item.value
            if item.name === ('$' + cmdtype)
				if item.value && item.value.trim() === cmdname
                    if multi 
                        _ multi.push(item)
                        return
                    else
					    return item
				if !item.value && cmdname === 'default'
                    if multi 
                        _ multi.push(item)
                        return
                    else
					    return item
    		var 
                decl found
                decl i
                decl l = item.children.length
            
			for i = 0; i < l; i++
                set found = md.findIttfCommand(item.children[i], cmdname, cmdtype, startItem, multi)
                if found && !multi
                    return found
            
            return null

	set md.findIttfCommandMulti
        function 
            param item
            param cmdname
            param cmdtype
            var commands = []
            _ md.findIttfCommand
                @ item
                @ cmdname
                @ cmdtype
                @ null
                @ commands
            return commands
    
	#
		# Search a $hook command going down deep
	set md.findHookExtDeep
        function 
            param item
            param hookname
			param searchType
			param startAppendNode
			param mixedNode

			if typeof mixedNode === 'undefined'
				# loog 'md.findHookExtDeep.enter first', item.name, item.value, item.model.brickKey
				# this must be the first call for a new mixed node
				_ assert.ok(typeof(item.model.$mixerBrickKey) !== 'undefined', 'wizzi-mtree.util.node.findHookExtDeep Error. In a first call the paramater item must be the root node of a mixed document. Found: ' + item.model.$mixerBrickKey)
				set mixedNode = item


			if (startAppendNode && item.id === startAppendNode.id) 
				# \b || (startAppendNode && item.parent && item.parent.id === startAppendNode.parent.id)
				
				# searching the hook for an append command
				# when descending from a parent we encounter startAppendNode
				# or a sibling we skip it and its descendants
				return null
            
			if searchType == 1
				if item.model.brickKey == mixedNode.model.brickKey
					if item.name === ('$hook')
						if item.value && item.value.trim() === hookname
							# loog 'md.findHookExtDeep.found', item.name, item.value, item.model.brickKey, 'mixedNode', mixedNode.name, mixedNode.value, mixedNode.model.brickKey
							return item
						if !item.value && hookname === 'default'
							# loog 'md.findHookExtDeep.found', item.name, item.value, item.model.brickKey, 'mixedNode', mixedNode.name, mixedNode.value, mixedNode.model.brickKey
							return item
			else
				if item.name === ('$hook')
					if item.value && item.value.trim() === hookname
						return item
					if !item.value && hookname === 'default'
						return item
            
			var 
                decl found
                decl i
                decl l = item.children.length
            
			for i = 0; i < l; i++
                set found = md.findHookExtDeep(item.children[i], hookname, searchType, startAppendNode, mixedNode)
                if found
                    return found
            return null

	#
		# Start the search of a $hook command from a $append command. 
		# The search start going up to ancestor mixed fragments.
	set md.findHookExt
        function 
            param item
            param hookname
			param searchType
			param startAppendNode
			# loog 'md.findHookExt.enter:', item.name, item.value, 'id', item.id, 'brickKey', item.model.brickKey
			# the startitem (the $append command) is saved
			# and will be checked when the search descends, to avoid 
			# searching descendants of the $append command itself.
			if typeof startAppendNode === 'undefined'
				set startAppendNode = item
            # var prn = item.parent
			var prn = md.findParentMixinRoot(item)
            if !prn
                return null
			else
				# loog 'md.findHookExt.parent.mixin', prn.name, prn.value, 'id', prn.id, 'brickKey', prn.model.brickKey, 'mixed by', prn.model.$mixerBrickKey
				var hook = md.findHookExtDeep(prn, hookname, searchType, startAppendNode)
				if hook
					return hook
				return md.findHookExt(prn, hookname, searchType, startAppendNode)
    
	#
		# find a $virtual command
		# The search go up to ancestors
	set md.findVirtual =
        function 
            param item
            param virtname
            var prn = item.parent
            if !prn
                return null
            var virt = md.findIttfCommand(prn, virtname, 'virtual')
            if virt
                return virt
            return md.findVirtual(prn, virtname)
    
	#
		# find the first parent node that is 
		# the root of a mixin
	set md.findParentMixinRoot =
        function 
            param item
			var prn = item.parent
            # loog 'util.node.findParentMixinRoot', prn.model.$mixerBrickKey
            while prn != null && ( typeof(prn.model) === 'undefined' || typeof(prn.model.$mixerBrickKey) === 'undefined' )
                set prn = prn.parent
                # loog 'util.node.findParentMixinRoot', prn ? prn.model.$mixerBrickKey : prn
			return prn

	set md.replace
        function 
            param item
            param replacers
			if !item.parent
				# loog 'util/node/replace/item', item
				foreach repl in replacers
					# loog 'util/node/replace/repl', repl
            var nodes = item.parent.children
            set item.parent.children = []
            foreach child in nodes
                if child === item
                    foreach replchild in replacers
                        set replchild.parent = item.parent
                        _ item.parent.children.push(replchild)
                else 
                    _ item.parent.children.push(child)
    
	set md.remove
        function 
            param item
            var nodes = item.parent.children
            set item.parent.children = []
            foreach child in nodes
                if child !== item
                    _ item.parent.children.push(child)
    
	#
		# inline a node hierarchy in a single text line
		# separated by the "__LS__" sequence
	set md.nodeToTextLine
        function 
            param node
            var acc
                [ 
            if node.children
                foreach item in node.children
                    _ textline(item, acc, '')
            return
                _ acc.join
                    @ work.lineSep
    
	function textline
        param node
        param acc
        param indent
        var open = node.tagSuffix == '(' ? '(' : ' '
        _ acc.push
			@ indent + node.name + open + (node.value || '')
        foreach item in node.children
            _ textline(item, acc, (indent + '  '))
    
	set md.inlinedTextToTextLines
        function 
            param text
            if typeof(text) === 'undefined' || text == null
                return 
                    { 
                        @ text text
                        @ lines null
            var text
                _ verify.replaceAll
                    @ text
                    @ work.textSep
                    @ '\n'
            var ss = text.split('\n')
            if ss.length == 1
                return 
                    { 
                        @ text ss[0]
                        @ lines null
            else 
                var lines
                    _ verify.replaceAll
                        @ ss[1]
                        @ work.lineSep
                        @ '\n'
                        ._ split('\n')
                return 
                    { 
                        @ text ss[0]
                        @ lines lines
    
	set md.isParentOfName
        function 
            param parsernode
            param nameOrArray
            var test = parsernode.parent
            while test
                if verify.isArray(nameOrArray)
                    var match = false
                    foreach value in nameOrArray
						set match = match || test.name === value
                    if match
                        return match
                else 
                    if test.name === nameOrArray
                        return true
                set test = test.parent
            return false
    
	set md.jsonifyProperty
        function 
            { node
            var ret = { name: node.name }
            if node.children && node.children.length > 0
                if node.name === '['
                    set ret = { name: node.value, value: [] }
                    foreach child in node.children
                        checked_call_return( value )
                            _ md.jsonifyValue(child)
                        _ ret.value.push(value)
                elif node.name === '{'
                    set ret = { name: node.value, value: {} }
                    foreach child in node.children
                        checked_call_return( prop )
                            _ md.jsonifyProperty(child)
                        set ret.value[prop.name] = prop.value
            else
                checked_try_call_return( value, node )
                    _ JSON.parse(node.value)
                set ret.value = value
            return ret

	set md.jsonifyValue
        function 
            { node
            var ret
            if node.name === '['
                set ret = []
                foreach child in node.children
                    checked_call_return( value )
                        _ md.jsonifyValue(child)
                    _ ret.value.push(value)
            elif node.name === '{'
                set ret = {}
                foreach child in node.children
                    checked_call_return( prop )
                        _ md.jsonifyProperty(child)
                    set ret.value[prop.name] = prop.value
            else
                checked_try_call_return( value, node )
                    _ JSON.parse
                        op+
                            + node.name
                            iif node.value && node.value.length > 0
                                then ' ' + node.value
                                else ''
                set ret = value
            return ret
	
	set md.previousSibling
        function 
            param node
            if !node.parent
                return null
            for var i=0; i<node.parent.children.length; i++
                # loog 'md.previousSibling', i, node.parent.children[i] == node
                if node.parent.children[i] == node
                    return node.parent.children[i-1] || null

	set md.nextSibling
        function 
            param node
            if !node.parent
                return null
            for var i=0; i<node.parent.children.length; i++
                # loog 'md.nextSibling', i, node.parent.children[i] == node
                if node.parent.children[i] == node
                    return node.parent.children[i+1] || null
    
    function spaces
        param num
        return 
            _ Array(num + 1)
                ._ join(" ")
    
	function _dumpNodeDeep
        param node
        param indent
        if node.name
            log spaces(indent * 2) + node.name + ' ' + (node.value || '') + ' ids: ' + node.parsedId + ' ' + node.id
        else
            log spaces(indent * 2) + node.n + ' ' + (node.v || '') 
        if (node.$args || node.$params)
            log spaces(indent * 2) + ' $args: ' + node.$args + ' $params: ' + node.$params
        set indent++
        foreach child in node.children
            _ _dumpNodeDeep(child, indent)
        set indent--
    
	set md.dump
        function 
            param nodes
            foreach node in nodes
                _ _dumpNodeDeep(node, 1)
    
	function _getIttfDeep
        param node
        param sb
        param indent
        param options
        if node.name
            const ids = options && options.showIds ? (' ids: ' + node.parsedId + ' ' + node.id) : ''
            _ sb.push
                @ spaces(indent * 4) + node.name + ' ' + (node.value || '') + ids
        else
            _ sb.push
                @ spaces(indent * 4) + node.n + ' ' + (node.v || '') 
        if (node.$args || node.$params)
            _ sb.push
                @ spaces(indent * 4) + ' $args: ' + node.$args + ' $params: ' + node.$params
        set indent++
        foreach child in node.children
            _ _getIttfDeep(child, sb, indent, options)
        set indent--

	set md.getIttf
        function 
            param nodes
            param options
            var sb = []
            foreach node in nodes
                _ _getIttfDeep(node, sb, 0, options || {})
            return sb.join('\n')

    var work
        { 
    set work.lineSep = "__LS__"
    set work.textSep = "__TS__"
