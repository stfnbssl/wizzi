base_test( util.node )

	$append imports
		var ittfGraph = require('@wizzi/utils').IttfDocumentGraph
		var node = require('../../../lib/utils/node')

	$include nodeUpdates
	$include nodeFinds

	it should modify nodes
		foreach item in nodeUpdates
			if item.action === 'remove'
				_ ittfGraph.createFrom
                    @ item.original
                    f_cb( original )
                        # loog 'original', original.toString()
                        _ ittfGraph.createFrom
                            @ item.expected
                            f_cb( expected )
                                var toremove = original.find(item.name)
                                _ node.remove
                                    @ toremove
                                # loog 'toremove', toremove.toString()
                                # loog 'original after', original.toString()
                                # loog 'expected', expected.toString()
                                tobe_true( original.equals(expected) )

			if item.action === 'replace'
				_ ittfGraph.createFrom
                    @ item.original
                    f_cb( original )
                        # loog 'original', original.toString()
                        _ ittfGraph.createFrom
                            @ item.replacer
                            f_cb( replacer )
                                _ ittfGraph.createFrom
                                    @ item.expected
                                    f_cb( expected )
                                        var toreplace = original.find(item.name)
                                        # loog 'toreplace', toreplace.toString()
                                        _ node.replace
                                            @ toreplace
                                            @ [replacer]
                                        # loog 'replacer', replacer.toString()
                                        # loog 'original after', original.toString()
                                        # loog 'expected', expected.toString()
                                        tobe_true( original.equals(expected) )

	it should find commands
		foreach item in nodeFinds
			if item.action === 'findCommand'
				_ ittfGraph.createFrom
                    @ item.original
                    f_cb( original )
                        # loog 'original', original.toString()
                        var found
                            _ node.findIttfCommand
                                @ original
                                @ item.value
                                @ item.name
                        # loog 'findCommand.name,value,found', item.name, item.value, found && found.id
                        tobe_object( found )
                        tobe_eql( item.expected, found.id )
			
	$*
    
	it should find the first $virtual command (up to ancestors)
		_ node.findVirtual
            @ item
            @ 'hello'

	it should find the first $virtual command
		_ node.findVirtual
            @ item
            @ 'hello'
    
	it should inline a node hierarchy in a single text line
		_ node.nodeToTextLine
            @ node
    
	it should deinline a text into a node hierarchy
		_ node.inlinedTextToTextLines
            @ text

	it should check if parent of a node of a certain name
		_ node.isParentOfName
            @ node
			@ nameOrArray
	*$
   
