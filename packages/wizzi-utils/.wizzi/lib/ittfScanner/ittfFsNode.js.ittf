module
    kind jsfile
    
	var path = require('path')
	var async = require('async')
	var vfile = require('../fSystem/vfile')
	var verify = require('../helpers/verify')
	var IttfDocumentGraph = require('../ittfGraph/ittfDocumentGraph')
	var ittfHtmlPrettifier = require('../pretty/ittfHtmlPrettifier')
	var mTreeHtmlPrettifier = require('../pretty/mTreeHtmlPrettifier')

	#
		#
		# File or directory in a folder tree structure of ITTF Documents.
		# Is the result of a scanners.folderScanner(folderPath, option) execution.
		# Can export its content to a wizzi.utils.ittfDocumentGraph, calling the method 'toIttf'.
		# The root node collects mixed or included ittf fragments that are 
		# outside (up) of root.ittfBasePath.
		#
		# { IttfFsNode
		#   { parent
		#     ref IttfFsNode || null
		#   string path
		#   string basename
		#   string dirname
		#   boolean isDirectory
		#   [ parts
		#   string schema
		#     # schema of ittf document file
		#   boolean isFragment
		#     # ittf document file is inside a t-folder
		#   boolean isTFolder
		#     # folder basename is t
		#   boolean isInsideTFolder
		#     # folder is descendant of a t-folder
		#   [ folders
		#   [ documents
		#   # if method 'setSourcePaths' is called
		#	string ittfBasePath
		#   string jsCodeBasePath
		#   # if method 'analize' has been called
		#   boolean isTest
		#   boolean isExample
		#   boolean isUtil
		#   boolean isTest
		#   boolean isJobFolder
		#   boolean isPackageRoot
		#
    
	class IttfFsNode
		
		ctor
			param nodePath
			param parent
			param options
			set this.parent = parent
            if parent
                set this.path = nodePath
                set this.fullPath = unixifyPath(path.join(parent.fullPath, nodePath))
                set this.relPath = this.fullPath.substr(parent.root().fullPath.length + 1)
            else
                set this.path = this.fullPath = unixifyPath(nodePath)
                set this.isRoot = true
                set this.relPath = ''
			set this.isDirectory = options.isDirectory
			set this.file = options.file
			set this.isFragment = false
			set this.isExternal = false
			set this.parts = this.fullPath.split('/')
			set this.segments = this.parts.slice(0, this.parts.length -1)
			set this.basename = this.parts[this.parts.length -1]
			set this.dirname = this.segments.join('/')
            # loog 'ittfScanner.IttfFsNode.ctor.nodePath', nodePath, 'this.basename', this.basename, 'this.path', this.path, 'this.fullPath', this.fullPath
            # loog 'ittfScanner.IttfFsNode.ctor.options', options
			if !options.isDirectory
                set this.schema = detectSchema(this.basename)
				set this.isFragment = isTFragment(this.parts)
			else
				set this.isTFolder = this.basename.toLowerCase() === 't'
				set this.isInsideTFolder = isTFragment(this.parts) && (!this.isTFolder)
			set this.folders = []
			set this.documents = []
			set this.info
				{
					@ schemas {}
					@ lib
						{
							@ documents []
					@ test
						{
							@ documents []
					@ example
						{
							@ documents []
					@ util
						{
							@ documents []
			if this.parent == null
				# In the root set mixed or included ITTF Fragments that are outside (up) of root.ittfBasePath
				set this.ittfBasePath = unixifyPath(nodePath)
				set this.jsCodeBasePath = null
				set this.externalFragments = []
				set this.externalIttfFsNodes = []
            set this.analized = false
		
		m root
			return this.parent == null ? this : this.parent.root()

		m setInfo
            callback
			var r = this.root()
            log 'called setInfo', this.basename, r === this
			if r === this
				_ this.setIds
                var that = this
				_ this.analize
                    f_cb()
                        # loog 'analized', that.basename
                        _ that.__setInfo
                            @ r
                            @ callback
            else
                _ this.__setInfo
                    @ r
                    @ callback

		m __setInfo
            param r
            param callback
            log 'called __setInfo', this.basename, this.isDirectory, this.isFragment, !this.isDirectory && !this.isFragment
			if !this.isDirectory && !this.isFragment
				var schema = r.info.schemas[this.schema]
				if !schema
					set schema
						{
							@ name this.schema
							@ documents []
					set r.info.schemas[this.schema] = schema
					# loog 'created schema', schema, r.info.schemas
				else
					# loog 'found', schema, r.info.schemas
				_ schema.documents.push(this)
				if this.isTest
					_ r.info.test.documents.push(this)
				elif this.isExample
					_ r.info.example.documents.push(this)
				elif this.isUtil
					_ r.info.util.documents.push(this)
				else
					_ r.info.lib.documents.push(this)
			var that = this
			if this.isDirectory
				async_foreach( doLoopFolders, ndx )
					var folder = that.folders[ndx]
					if !folder
						async_foreach( doLoopDocuments, ndxDoc )
							var document = that.documents[ndxDoc]
							if !document
								r_cb(r)
							log 'document setted', document.basename
							_ document.setInfo
								f_cb()
									_ doLoopDocuments
										@ ndxDoc + 1
					_ folder.setInfo
						f_cb()
                            _ doLoopFolders
								@ ndx + 1
            else
                return
                    _ callback
                        @ null
                        @ r
        
        m addDocument
			param relPath
			param options
			#
			# FIXME options.basePath seems not used
			#
			var r = this.root()
            var tobeAddedFullPath = unixifyPath(path.join(this.fullPath, relPath)) 
            set relPath = unixifyPath(relPath)
            # loog 'addDocument relPath', relPath, 'to this.fullPath', this.fullPath
			var parts = tobeAddedFullPath.split('/')
			# loog 'addDocument parts.length', parts.length, 'to this.parts.length', this.parts.length
			if parts.length <= this.parts.length
                # loog 'addDocument parts.length <= this.parts.length return null'
				return null
			if this.match(parts) == false
				# loog 'addDocument this.match(parts) == false return null'
				return null
			if parts.length == this.parts.length + 1
				# loog 'addDocument could be a document try match'
                var dnode
                    new IttfFsNode
                        @ parts[parts.length-1]
                        @ this
                        {
                            @ isDirectory false
                            @ file r.file
                _ this.documents.push(dnode)
                # loog '+++ addDocument added document', parts[parts.length-1], 'to', this.path
                return dnode
			else
                var relPathParts = relPath.split('/')
                var subfolder = relPathParts[0]
                var subRelPath = relPathParts.slice(1).join('/')
                # loog 'addDocument try subfolder', subfolder, 'subRelPath', subRelPath
				var added
				foreach f in this.folders
					$$ if f.path === subfolderPath
                    if f.path === subfolder
						set added
							_ f.addDocument(subRelPath, options)
						return added
				var fnode
					new IttfFsNode
						$$ @ subfolderPath
                        @ subfolder
						@ this
						{
							@ isDirectory true
							@ file r.file
				_ this.folders.push(fnode)
				# loog 'addDocument created subfolder', subfolderPath
                # loog '+++ addDocument created subfolder', subfolder, 'in folder', this.path
				set added
					_ fnode.addDocument(subRelPath, options)
				return added
		
		m addExternalDocument
			param fullPath
			var r = this.root()
			if r !== this
				throw new Error('wizzi-utils.ittfFsNode.addExternalDocument must be called on root node only.')
			var relPath
				_ path.relative
					@ this.ittfBasePath
					@ fullPath
			# loog 'addExternalDocument.relPath', relPath, 'fullPath', fullPath
			var dnode
				_ this.searchDocument
					@ relPath
			if dnode
				# loog 'addExternalDocument.relPath already exists', relPath,
				return dnode
			else
				set dnode
					new IttfFsNode
						@ relPath
						@ this
						{
							@ isDirectory false
							@ file r.file
				set dnode.isExternal = true
				_ this.documents.push(dnode)
				# loog 'addExternalDocument.relPath added', relPath
				return dnode

		m match
			param parts
			if parts.length < this.parts.length
				return false
			foreach part in this.parts
				if part !== this.parts[i]
					return false
			return true

		$include ittfFsNode/ids
		
		$include ittfFsNode/sources
		
		$include ittfFsNode/analize
		
		$include ittfFsNode/toIttf

	function detectSchema
		param name
		var ss = name.split('.')
		if ss.length > 1
			return ss[ss.length -2]
		else
			return null

	function isTFragment
		param segments
		return segments.indexOf('t') > -1

	var win32 = process.platform === 'win32'

	function unixifyPath
		param path_string
		if win32
			return path_string.replace(/\\/g, '/')
		else
			return path_string

    set module.exports = IttfFsNode