$group
	
	m toIttfRoot
		param ittfDocumentGraph
		var kempty = ""
		var kschema = "schema"
		var kfolder = "folder"
		var klib = "lib"
		var kutil = "util"
		var ktest = "test"
		var kexample = "example"
		
		var r = this
		
		addvar(comment, ittfDocumentGraph, #, '`fs-base-uri` is the dirname of `package-base-uri`' + kempty)
		addset(comment, ittfDocumentGraph, #, '`rel-dirname(s)` and `rel-uri(s)` of `f` and `d` nodes are relative to `fs-base-uri`' + kempty)
		addvar(fsBaseUri, ittfDocumentGraph, fs-base-uri, r.ittfBasePath)
		addvar(packageBaseUri, ittfDocumentGraph, package-base-uri, r.ittfBasePath + '/' + this.basename)
		addvar(gitBaseUri, ittfDocumentGraph, git-base-uri, r.jsCodeBasePath)

		addvar(inf, ittfDocumentGraph, fs-info)

		var dg, t, any
			
		for var k in r.info.schemas
			addset(dg, inf, d-group, k)
			addset(t, dg, type, kschema)
			# foreach d in r.info.schemas[k].documents
			# 	addset(any, dg, d, d.path)
				
		if r.info.lib.documents.length > 0
			addset(dg, inf, d-group, klib)
			addset(t, dg, type, kfolder)
			# foreach d in r.info.lib.documents
			# 	addset(any, dg, d, d.path)
			
		if r.info.util.documents.length > 0
			addset(dg, inf, d-group, kutil)
			addset(t, dg, type, kfolder)
			# foreach d in r.info.util.documents
			# 	addset(any, dg, d, d.path)
			
		if r.info.test.documents.length > 0
			addset(dg, inf, d-group, ktest)
			addset(t, dg, type, kfolder)
			# foreach d in r.info.test.documents
			# 	addset(any, dg, d, d.path)
			
		if r.info.example.documents.length > 0
			addset(dg, inf, d-group, kexample)
			addset(t, dg, type, kfolder)
			# foreach d in r.info.example.documents
			# 	addset(any, dg, d, d.path)
			
	m toIttf
		param ittfDocumentGraph

        # loog 'toIttf, type, this.analized, this.basename, isObject(this.ittfDocumentGraph): ', 
            \b ittfDocumentGraph.__type, this.analized, this.basename, verify.isObject(this.ittfDocumentGraph)

		var r = this.root()
		
		if r === this
		
			_ this.toIttfRoot(ittfDocumentGraph)
			
		var n
			_ ittfDocumentGraph.add
				iif this.isDirectory
					then 'f'
					else 'd'
				@ this.basename
		
		_ n.add
			@ 'id'
			@ this.id

		if this.isDirectory
		
			if this.isPackageRoot || this.root() === this.parent
				_ n.add
					@ 'is-package-root'
			if this.isJobFolder
				_ n.add
					@ 'is-job-folder'
			if this.isTFolder
				_ n.add
					@ 'is-t-folder'
			if this.isInsideTFolder
				_ n.add
					@ 'is-inside-t-folder'
		
		else
			
			if this.isFragment
				_ n.add
					@ 'is-fragment'
			
			if this.isExternal
				_ n.add
					@ 'is-external'

			var usedFragments = this.ittfDocumentGraph.fragments
			var ittfReferences = this.ittfDocumentGraph.ittfReferences
			var pretty
				_ mTreeHtmlPrettifier
					@ this.ittfDocumentGraph
			
			if pretty.__is_error
				_ n.add
					@ 'ittf'
					@ 'Error: not loaded'
			
			else
				var ittfSource
					_ n.add
						@ 'ittf'
						_ verify.makeInline(pretty.prettyLines.join(''))

				var r = this.root()
				var ittfBasePath = r.ittfBasePath
				foreach item in Object.keys(usedFragments)
					
					# loog 'usedFragments[k]', item, usedFragments[item]
                    var ittfFragmentsNode
						_ ittfSource.add
							@ 'fragment'
							@ item
					
					_ ittfFragmentsNode.add
						@ 'd-id'
						@ usedFragments[item].id
					
					_ ittfFragmentsNode.add
						@ 'rel-uri'
						_ unixifyPath
							_ path.relative
								@ ittfBasePath
								@ usedFragments[item].uri
		
				foreach item in Object.keys(ittfReferences)
					
					var ittfFragmentsNode
						_ ittfSource.add
							@ 'reference'
							@ item
					
					_ ittfFragmentsNode.add
						@ 'd-id'
						@ ittfReferences[item].id
					
					_ ittfFragmentsNode.add
						@ 'rel-uri'
						_ unixifyPath
							_ path.relative
								@ ittfBasePath
								@ ittfReferences[item].uri

		if this.isTest
			_ n.add
				@ 'is-test'
		
		if this.isExample
			_ n.add
				@ 'is-example'
		
		if this.isUtil
			_ n.add
				@ 'is-util'
		
		_ n.add
			@ 'rel-dirname'
			@ this.dirname
		
		_ n.add
			@ 'rel-uri'
			@ this.relPath

		if this.isDirectory
			
			foreach f in this.folders
				_ f.toIttf(n)

			foreach d in this.documents
				if r === this && d.isExternal
					_ d.toIttf(ittfDocumentGraph)
				else
					_ d.toIttf(n)

		else

			_ n.add
				@ 'schema'
				@ this.schema

