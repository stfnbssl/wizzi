module
	kind jsfile

    $
        var opt = {
            level: 0,
            step: 1,
            name: 'wf_samples_step_1',
            title: 'Wizzi factory, samples, load and generate',
            folderLevel: 3
        }

    import util
    import path
	import fs
	var stringify = require('json-stringify-safe')
	var wizziUtils = require('@wizzi/utils')
    +
    # local disk filesystem
    var file = wizziUtils.file
	+
    # virtual filesystem
    var vfile = require('@wizzi/utils').vfile
	# defaults to local disk filesystem
	var fsfile = vfile()
    +
    # utilities
    var verify = wizziUtils.verify
    var mocks = wizziUtils.mocks    
    +
    # wizzi Package
    var wizziIndex = require('../../../index')
    +
    var pluginsBaseFolder
        _ path.resolve
            @ __dirname
            @ '..'
            @ '..'
            @ '..'
            @ '..'

    _ wizziIndex.createFactory
        {
            { repo
                @ storeKind 'filesystem'
            { plugins
                $if false
                    @ pluginsBaseFolder pluginsBaseFolder
                    [ items
                        @ './wizzi-web/index'
                        @ './wizzi-core/index'
                $else
                    [ items
                        @ 'wizzi-web'
                        @ 'wizzi-core'
            { globalContext
        f_cb_test( wf ) 
            var htmlFriendsPath
                _ path.join
                    @ __dirname
                    @ 'ittf'
                    @ 'friends.html.ittf'
            var htmlFriendsPathIttf
                _ path.join
                    @ __dirname
                    @ 'ittf'
                    @ 'friends.ittf.ittf'
            var friendsArray
                [ 
                    @ 'arthur'
                    @ 'mary'

            # Generate the html model.
                # The html schema is detected from the path.
            _ wf.loadModel
                @ 'html'
                @ htmlFriendsPath
                {
                    { mTreeBuildUpContext                    
                        @ friends friendsArray
                f_cb_test(wizziModel)
                    _ printValue
                        @ 'Loaded Wizzi Model Instance: friends'
                        _ stringify
                            @ wizziModel.elements
                            @ null
                            @ 2
                    # Generate the html document artifact.
                        # No options, the default artifact generator
                        # for the html schema will be used.
                    _ wf.loadModelAndGenerateArtifact
                        @ htmlFriendsPath
                        {
                            { modelRequestContext
                                @ friends friendsArray
                        @ 'html/document'
                        f_cb_test(artifactText)
                            _ printValue
                                @ 'Generated Artifact: html/document'
                                @ artifactText
                            
                            _ wf.loadModel
                                @ 'ittf'
                                @ htmlFriendsPathIttf
                                {
                                    { mTreeBuildUpContext                    
                                        @ friends friendsArray
                                f_cb_test(wizziModel)
                                    _ wf.transformModel
                                        @ wizziModel
                                        @ 'ittf/html-pretty'
                                        {
                                        f_cb_test(prettyfied)
                                            _ printValue
                                                @ 'Wizzi Model Instance friends loaded as ITTF, transformed with Model Transformer: ittf/html-pretty'
                                                @ prettyfied

    common/example/t/example_prints( ${opt.name}, ${opt.level}, ${opt.step} )                                               