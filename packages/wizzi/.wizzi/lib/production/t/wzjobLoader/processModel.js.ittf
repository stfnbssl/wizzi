$group

	m processWzjobModel
		param wzjobModel
		#
			# Analizes a wizzi model of schema `wzjob`.
			# TODO In the `wzjob` schema create an abstract element named `production-step` and derive from it:
			#      `artifact`, `model-dom`, `wzjob-ref`, `folder-gen`, ... .
			# Creates a `wizzi/production/productionManager/ProductionStepConfig` object for each production step requested.
			# Accumulates the requests calling the methods:
			# . addPendingWzjobRequest
			# . addProductionStepConfig
			# 
			# Types of production step that can be requested in a `wzjob`
			# . Wizzi Model artifact
			# . Wizzi Model collection artifact
			# . Code write artifact
			# . Final artifact
			# . Wizzi model DOM
			# . Folder generation
			# . Wzjob reference
			#
			# Production structure
			# { wzjob
			#   [ productions
			#     { production
			#       string destFolder 
			#       [ lines
			#         { line
			#            string cwdFolder
			#            string destFolder 
			#            [ artifacts
			#              { artifact
			#                string src
			#                  The path to the primary source document of the artifact.
			#                  If relative, the base path is the "cwdFolder" of the parent line.
			#                  If the artifact is a code write artifact the "src" attribute must not be declared.
			#                string destPath
			#                  The artifact source file path "src" is the default relative destination path
			#                  of the generated artifact. When set, this attribute overrides the default.
			#                  It may be an absolute path.
			#                  If the artifact is a code write generation the "destPath" attribute must be declared.
					
		var productionStepConfig

		foreach wzjobModelElement in wzjobModel.models
            if verify.isNotEmpty(wzjobModelElement.exportName)
                var globalModelInfoConfig
                    {
                        @ exportName wzjobModelElement.exportName
                        @ src wzjobModelElement.src
                        @ cwd wzjobModel.modelsBaseFolder
                        @ schema wzjobModelElement.schema
                        @ format wzjobModelElement.format
                _ this.addGlobalModelInfoConfig(globalModelInfoConfig)

        foreach wzjobProductionElement in wzjobModel.productions
			# loog 'wizzi.wzjobLoader.processWzjobModel.production', wzjobProductionElement.wzName, util.inspect(wzjobProductionElement, { depth: 2 })
						
			foreach wzjobLineElement in wzjobProductionElement.lines
				# loog 'wizzi.wzjobLoader.processWzjobModel.line', wzjobLineElement.wzName, util.inspect(wzjobLineElement, { depth: null })
							
				foreach wzjobArtifactElement in wzjobLineElement.artifacts
					# loog 'wizzi.wzjobLoader.processWzjobModel.artifact', util.inspect(wzjobArtifactElement, { depth: 1 })
								
					if verify.isEmpty(wzjobArtifactElement.src)
						#
							# THIS IS A CODEWRITE artifact
							# this artifact is generated by a code write generation
						set productionStepConfig
							{
								@ name wzjobArtifactElement.wzName
								@ options 
									{
								@ contexts
									[
								@ gen
									{
										@ generator wzjobArtifactElement.generator
								@ dest
									{
										@ baseFolder wzjobModel.destBaseFolder
										@ folder wzjobLineElement.destFolder || wzjobProductionElement.destFolder
										@ path wzjobArtifactElement.destPath
										@ extension wzjobArtifactElement.extension
								@ collection wzjobArtifactElement.collection
                                @ toString
									function
										return 'Artifact info config: ' + this.name + '/' + this.gen.generator

								
						foreach modelRef in wzjobArtifactElement.modelRefs
							# loog 'WizziJob.getProductionStepConfigs.modelRef', modelRef.wzName, modelRef.collName, modelRef.modelCollections.length, util.inspect(modelRef, { depth: 2 })
							var modelInfoConfig
								_ this._createContextModelInfoConfig
									@ wzjobModel
									@ modelRef
							_ productionStepConfig.contexts.push(modelInfoConfig)

					else
									
						# This is a WIZZIMODEL artifact or WFJOB artifact
						set productionStepConfig
							{
								@ name wzjobArtifactElement.wzName
								@ options
									{
								@ model
									{
										@ cwd wzjobLineElement.cwdFolder
										@ src wzjobArtifactElement.src
										@ ignore wzjobArtifactElement.ignore
										@ schema wzjobArtifactElement.schema
										@ format wzjobArtifactElement.format
										@ isCompile wzjobArtifactElement.isCompile
										@ contexts
											[
										@ transformers this._getTransformerList(wzjobArtifactElement.transformers)
								@ isWzJob wzjobArtifactElement.isWzJob
								@ isWzModelType wzjobArtifactElement.isWzModelType
								@ isWzModelToFolder wzjobArtifactElement.isWzModelToFolder
								@ gen
									{
										@ generator wzjobArtifactElement.generator
								@ dest
									{
										@ baseFolder wzjobModel.destBaseFolder
										@ folder wzjobLineElement.destFolder || wzjobProductionElement.destFolder
										@ path wzjobArtifactElement.destPath
										@ extension wzjobArtifactElement.extension
                                @ collection wzjobArtifactElement.collection
								@ toString
									function
										return 'Artifact info config: ' + this.name + '/' + this.model.src + '/' + this.model.schema

								
						# loog 'WizziJob.getProductionStepConfigs.art', wzjobArtifactElement.wzName, wzjobLineElement.srcFolder, wzjobArtifactElement.src, wzjobArtifactElement.schema

						foreach modelRef in wzjobArtifactElement.modelRefs
							# loog 'WizziJob.getProductionStepConfigs.modelRef', modelRef.wzName, modelRef.collName, modelRef.modelCollections.length, util.inspect(modelRef, { depth: 2 })
							var modelInfoConfig
								_ this._createContextModelInfoConfig
									@ wzjobModel
									@ modelRef
							_ productionStepConfig.model.contexts.push(modelInfoConfig);
								
					# loog 'WizziJob.productionStepConfig', util.inspect(productionStepConfig, { depth: 1 })
					if wzjobArtifactElement.isWzJob
						_ this.addPendingWzjobRequest(productionStepConfig)
					else
						_ this.addProductionStepConfig(productionStepConfig)
					
	#
		# params
		# { wzjobModelRefElement
		#   string wzName
		#     is the key for the wzjobModelElement
		#   string collName
		#   string collItemName
		#   [ collPathTemplateValues
		#     { collPathTemplateValue
	m _createContextModelInfoConfig
		param wzjobModel
		param wzjobModelRefElement
		# model existence has already been verified loading the wzjobModel
		var wzjobModelElement = wzjobModel.getModel(wzjobModelRefElement.wzName)
		var modelInfoConfig
			{
				@ exportName wzjobModelRefElement.exportName
				@ src 
					_ this._getModelSrc
						@ wzjobModel
						@ wzjobModelElement.src
						@ wzjobModelElement
				@ schema wzjobModelElement.schema
				@ format wzjobModelElement.format
				@ isCompile wzjobModelElement.isCompile
				@ contexts []
				@ transformers this._getTransformerList(wzjobModelRefElement.transformers)
				@ coll null
			
		if wzjobModelRefElement.collName
			# Single items of a collection contained in a WizziModelInstance may act as data contexts
			# of artifacts where each collection item generates a separate artifact.
			# The coll property specifies:
			# . name                the collection name
			# . itemName            the export name of the collection item when acting as a data context
			# . pathTemplateValues  the property names of the collection item that will be used to build 
			#                       the destination path of the artifact
			set modelInfoConfig.coll
				{
					@ name wzjobModelRefElement.collName
					@ itemName wzjobModelRefElement.collItemName
					@ pathTemplateValues wzjobModelRefElement.collPathTemplateValues
			
		# recurse creation of context modelInfos
		foreach modelRef in wzjobModelElement.modelRefs
			_ modelInfoConfig.contexts.push
				_ this._createContextModelInfoConfig
					@ wzjobModel
					@ modelRef

		return modelInfoConfig

	m _getArtifactModelSrc
		param cwd
		param src
		param node
		#
			# When 'src' is relative, the base path is the 'cwd' attribute
			# declared on the wzjobLine element.
		if verify.isAbsolutePath(src)
			return src
		else
			if verify.isString(cwd)
				return
					_ path.join
						@ cwd
						@ src
			else
				return 
					_ errorMsg
						@ 'PathError'
						@ "The src attribute of the artifact element: " + src + ' is a relative path. A cwd attribute is required on the line element.'
						@ node

	m _getModelSrc
		param wzjobModel
		param src
		param node
		#
			# When 'src' is relative, the base path is the 'modelsBaseFolder'
			# declared on the `wzjob` element.
		if verify.isAbsolutePath(src)
			return src;
		else
			if verify.isString(wzjobModel.modelsBaseFolder)
				return
					_ path.join
						@ wzjobModel.modelsBaseFolder
						@ src
			else
				return 
					_ errorMsg
						@ 'PathError'
						@ "The src attribute of the model element: " + src + ' is a relative path. A models-base-folder attribute is required on the wzjob element.'
						@ node

	m _getTransformerList
		param transformers
		var ret = []
		foreach item in transformers
			_ ret.push
				{
					@ name item.wzName
					@ dumpFile item.dumpFile
		return ret

