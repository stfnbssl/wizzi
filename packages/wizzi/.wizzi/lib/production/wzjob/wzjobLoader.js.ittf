module
	kind jsfile

	var path = require('path')
	var util = require('util')
	var assert = require('assert')
	var async = require('async')
	var verify = require('@wizzi/utils').verify
	# 
		# Async load a `wzjob` wizzi model and accumulate
		# productionStepConfig elements.
		# If the `wzjob` model contains "artifact" elements
		# check that they have not already been added and add them to 
		# the productionStepConfigs collection.
		# If the `wzjob` model contains 'artifact' elements with the
        # "isWzJob" attribute check that they have not already been processed
        # and add them to pendingWzjobRequests.

	wz-class WzjobLoader
		
		ctor
			param productionManager
			set this.productionManager = productionManager
            set this.globalModelInfoConfigs = []
			set this.pendingWzjobRequests = []
			# FIXME checking pendingWzjobRequests should be enough. Why seenWzjobRequests?
            set this.seenWzjobRequests = []
			set this.productionStepConfigs = []
		
		m load
			param wzjobRequest
			param callback

			_ this.seenWzjobRequests.push(wzjobRequest)

			var ittfDocumentUri
                iif verify.isAbsolutePath(wzjobRequest.model.src)
                    then 
                        set wzjobRequest.model.src
                    else 
                        _ path.join
                            @ wzjobRequest.model.cwd
                            @ wzjobRequest.model.src

			# wzjobRequest.context has not been implemented yet
			# and probably it will never be.
			# Its properties should be produced by previous 
			# executions in the wzjob load recursive process.
			# To pass a context to the wzjob mTree loader
			# we use the globalContext of the wizziFactory.
			var that = this
			_ this.productionManager.loadWzjob
				@ ittfDocumentUri
				@ wzjobRequest.context || {}
				f_cb( wzjobModel )
					_ that.processWzjobModel(wzjobModel)
					return
						_ callback
							@ null
							@ that
		
		m addGlobalModelInfoConfig
			param globalModelInfoConfig
			if this._isGlobalModelInfoConfigAdded(globalModelInfoConfig) == false
				_ this.globalModelInfoConfigs.push(globalModelInfoConfig)

		m _isGlobalModelInfoConfigAdded
			param globalModelInfoConfig
			foreach item in this.globalModelInfoConfigs
				if this._areGlobalModelInfoConfigsEqual(item, globalModelInfoConfig)
					return true
			return false

		m addPendingWzjobRequest
			param productionStepConfig
			if this._isWzjobSeen(productionStepConfig) == false
				_ this.pendingWzjobRequests.push(productionStepConfig)

		m _isWzjobSeen
			param productionStepConfig
			foreach item in this.seenWzjobRequests
				if this._areWzjobRequestsEqual(item, productionStepConfig)
					return true
			return false
		
		m addProductionStepConfig
			param productionStepConfig
			if this._isProductionStepConfigAdded(productionStepConfig) == false
				_ this.productionStepConfigs.push(productionStepConfig)

		m _isProductionStepConfigAdded
			param productionStepConfig
			foreach item in this.productionStepConfigs
				if this._areProductionStepConfigsEqual(item, productionStepConfig)
					return true
			return false

		m _areGlobalModelInfoConfigsEqual
			param a
			param b
			return a.exportName === b.exportName &&
				\b a.src === b.src

		m _areWzjobRequestsEqual
			param a
			param b
			return a.model.cwd === b.model.cwd &&
				\b a.model.src === b.model.src

		m _areProductionStepConfigsEqual
			param a
			param b
			return a.model.cwd === b.model.cwd &&
				\b a.model.src === b.model.src &&
				\b a.dest.baseFolder === b.dest.baseFolder &&
				\b a.dest.folder === b.dest.folder &&
				\b a.dest.path === b.dest.path &&
				\b a.dest.extension === b.dest.extension &&
				\b a.gen.generator === b.gen.generator

		$include wzjobLoader/processModel

	$include wzjobLoader/asyncRecurseWzjobLoad

	function errorMsg
		param code
		param message
		param node
		set message
			iif node
				then 
					new errors.NodeError
						@ message
						@ node
					._ toString
				else message
		return
			{
				@ __is_error true
				@ code code
				@ message message




