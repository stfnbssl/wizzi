module wizzi@${wzCtx.version}.packiUtils
	kind es6
    +
    const file = require('@wizzi/utils').file
    const vfile = require('@wizzi/utils').vfile
	const verify = require('@wizzi/utils').verify
    const constants = require('../constants')
    const JsonComponents = require('@wizzi/repo').JsonComponents
    let wizziFactory = null
    +
    const mdDisplayName = "wizzi.services.packiUtils"
    +
    const 
        {
            @ packiFilePrefix
            @ packiFilePrefixExtract
            @ metaProductionTempFolder
            @ metaProductionWizziFolder
        = constants
    +
    const md = module.exports = {}
    +
    set md.ensurePackiFilePrefix
        function 
            param filePath
            return
                iif filePath.startsWith(packiFilePrefix)
                    then filePath
                    else packiFilePrefix + filePath
    +
    set md.createPackifilesFromFs
        function 
            param folderPath
            param callback
            const fsFile = vfile()
            _ fsFile.getFiles
                @ folderPath
                {
                    @ deep true
                    @ documentContent true
                a_cb(files)
                    const packiFiles = {}
                    foreach file in files
                        set packiFiles[file.relPath]
                            {
                                @ type 'CODE'
                                @ contents file.content
                    r_cb(packiFiles)
    +
    set md.jsonFsToPackiFiles
        function 
            param jsonFs
            param filterFolder
            param callback
            if !callback
                set callback = filterFolder
                set filterFolder = ''
            set filterFolder = filterFolder || ''
            const packiFiles
                {
            _ jsonFs.toFiles
                {
                    @ removeRoot packiFilePrefixExtract
                a_cb( files ) 
                    _ files.forEach
                        =>
                            param file
                            if verify.isEmpty(filterFolder) || file.relPath.startsWith(filterFolder + '/')
                                const k = verify.isEmpty(filterFolder) ? file.relPath : file.relPath.substring(filterFolder.length + 1) 
                                set packiFiles[k]
                                    {
                                        @ type 'CODE'
                                        @ contents file.content
                                        @ generated true
                    r_cb(packiFiles)

    +
    set md.writePackifiles
        function 
            param folderPath
            param packiFiles
            for var k in packiFiles
                _ file.write
                    _ path.join
                        @ folderPath
                        @ k
                    @ packiFiles[k].contents
    +
    #
        # params
        # [ metaProductions 
        #   {
        #     string name
        #     { folderTemplates 
        #       :ref PackiFiles
        #     { ittfDocumentTemplates 
        #       :ref PackiFiles
        #       :optional
        #     { plainDocuments 
        #       :ref PackiFiles
        #       :optional
        # result
        #   { 
        #     :ref PackiFiles
    set md.createMetaPackifilesFromWizziHub
        function 
            param metaProductions
            const result = {}
            foreach mp in metaProductions
                for var k in mp.folderTemplates
                    var newk = 'folderTemplates/' + mp.productionName + '/' + k
                    set result[newk] = mp.folderTemplates[k]
                if mp.ittfDocumentTemplates
                    for var k in mp.ittfDocumentTemplates
                        var newk = 'ittfDocumentTemplates/' + mp.productionName + '/' + k
                        set result[newk] = mp.ittfDocumentTemplates[k]
                if mp.plainDocuments
                    for var k in mp.plainDocuments
                        var newk = 'plainDocuments/' + mp.productionName + '/' + k
                        set result[newk] = mp.plainDocuments[k]
            return result

    set md.createJsonWizziFactoryAndJsonFs
        function 
            param packiFiles
            param plugins
            param metaPlugins
            param callback
            const jsonDocuments
                [
            _ Object.keys(packiFiles).map
                =>
                    param value
                    if packiFiles[value].type === 'CODE' && packiFiles[value].contents && packiFiles[value].contents.length > 0
                        const filePath = md.ensurePackiFilePrefix(value)
                        # loog 'createJsonWizziFactoryAndJsonFs.filePath', filePath
                        _ jsonDocuments.push
                            {
                                @ path filePath
                                @ content packiFiles[value].contents
            _ JsonComponents.createJsonFs
                @ jsonDocuments
                =>
                    param err
                    param jsonFs
                    if err
                        return callback(err)
                    if !wizziFactory
                        set wizziFactory = require('./wizziFactory')
                    # loog 'wizziFactory', wizziFactory
                    _ wizziFactory.createFactory
                        {
                            { repo
                                @ storeKind 'json'
                                @ storeJsonFs jsonFs
                            @ plugins plugins
                            @ metaPlugins metaPlugins || {}
                            @ verbose false
                        =>
                            param err
                            param wf
                            if err
                                return callback(err)
                            _ callback
                                @ null
                                {
                                    @ wf wf
                                    @ jsonFs jsonFs

    set md.mountToPackiFolder
        function 
            param packiFiles
            param packiFilesTobeMounted
            param folderName
            for var k in packiFilesTobeMounted
                let basename = k
                let prefix = ''
                if k.startsWith(packiFilePrefix)
                    set basename = k.substring(packiFilePrefix.length)
                    set prefix = packiFilePrefix
                set packiFiles[prefix + folderName + '/' + basename] = packiFilesTobeMounted[k]
            return packiFiles

    set md.unmountPackiFolder
        function 
            param packiFiles
            param folderName
            const result = {}
            for var k in packiFiles
                let basename = k
                let prefix = ''
                if k.startsWith(packiFilePrefix)
                    set basename = k.substring(packiFilePrefix.length)
                    set prefix = packiFilePrefix
                if basename.startsWith(folderName)
                    set result[prefix + basename.substring(folderName.length+1)] = packiFiles[k]
            return result

    set md.getAddedFiles
        function 
            param packiFiles
            param packiFilesAfter
            const result = {}
            for var k in packiFilesAfter
                if !packiFiles[k]
                    set result[k] = packiFilesAfter[k]
            return result