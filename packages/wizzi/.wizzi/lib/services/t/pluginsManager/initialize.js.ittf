$group

	#
		# { options
		#   string pluginsBaseFolder
		#     default process.cwd()
		#   [ items
		#     required
		#     string pluginName
		# }
	m initialize
		{ options
			[ items
				optional
		callback
		
		# loog 'wizzi.pluginsManager.initialize.options', options
		var itemsOptions = options.items
		if typeof(itemsOptions) === 'undefined' || itemsOptions == null
			set options.items = []
		
		if options.verbose
            var date = new Date()
            var timeNow = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()
            warn timeNow, "Starting ", this.__type, 'version', this.__version

        var that = this
		_ this.loadPlugins
			@ options
			f_cb( plugins )
				function register
					param i
					if i >= plugins.length
						return
							_ callback
								@ null
								@ that
					var plugin = plugins[i]
					_ that.registerFactoryPlugin
						@ plugin
                        @ options
						f_cb( notUsed )
							return register(++i)
				_ register(0)

	m loadPlugins
		param options
		param callback
		+
		var itemsOptions = options.items
        # loog 'pluginsBaseFolder before', options.pluginsBaseFolder
        # loog '__dirname', __dirname
		var pluginsBaseFolderNodeModule = path.resolve(__dirname, '..', '..', '..'); $$ process.cwd()
		var pluginsBaseFolder = options.pluginsBaseFolder 
            \b || path.resolve(__dirname, '..', '..', '..') $$ process.cwd()
        
		$$ loog'pluginsBaseFolder', pluginsBaseFolder
		var packagePathCache = this.packagePathCache
		+
		function resolveNext
            param i
            if i >= itemsOptions.length
				# loog 'itemsOptions', itemsOptions
                return callback(null, itemsOptions)
            var plugin = itemsOptions[i]
            if typeof (plugin) === "string"
                set plugin = itemsOptions[i] = {packagePath: plugin}
            if plugin.hasOwnProperty("packagePath") && !(plugin.hasOwnProperty("setup"))
                const pluginsBaseFolderItem = (plugin.packagePath[0] === "." || plugin.packagePath[0] === "/") 
                    \b ? pluginsBaseFolder
                    \b : pluginsBaseFolderNodeModule;
                return 
					_ resolveModule
						@ pluginsBaseFolderItem
						@ plugin.packagePath
						function
							param err
							param moduleObject
							if err
								return callback(err)
							_ Object.keys(moduleObject)
								._ forEach
									function 
										param key
										if !plugin.hasOwnProperty(key)
											set plugin[key] = moduleObject[key]
											# loog 'plugin key', key
							set plugin.packageName = plugin.packagePath
							set plugin.packagePath = moduleObject.packagePath
                            if options.verbose
                                var date = new Date()
                                var timeNow = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()
                                var spaces = new Array(timeNow.length+1).join(' ')
                                warn timeNow, "Loaded plugin", plugin.packageName, 'version', plugin.version
                                warn spaces, 'schemas: ', plugin.provides.schemas.join(', ')
                                warn spaces, 'artifact generators: ', plugin.provides.artifactGenerators.join(', ')
                                if plugin.provides.modelTransformers.length > 0
                                    warn spaces, 'model transformers: ', plugin.provides.modelTransformers.join(', ')
							return resolveNext(++i)
            else
				return resolveNext(++i)
        
		_ resolveNext(0)
		
		$include ./resolve-module
		$include ./resolve-package

