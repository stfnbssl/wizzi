$group

	#
		# Writes the content of a Wizzi Model of schema `ittf`
        # into a PackiFiles object, processing the $file and $plain Ittf Commands.
        # The current instance should be a json factory
		# params
        #   { ittfModel
		#   { options
        #     string baseDestFolder   
        # returns
		# | packifiles
		# | wzError
	m ittfModelToFolder
		{ ittfModel
		{ options
		callback
        +
        if this.storeKind != 'json'
            var packiFiles = {}
            return
                _ this.createJsonFactoryAndJsonFs
                    @ packiFiles
                    {
                    a_cb( wfJsonFs )
                        _ wfJsonFs.wf.ittfModelToFolder
                            @ ittfModel
                            @ options
                            @ callback
        +
        const baseDestFolder = packiFilePrefix + (options.baseDestFolder || "")
        # loog 'baseDestFolder', baseDestFolder, options.baseDestFolder 
        const fileService = this.fileService
        var f_count = 0
        var that = this
        iife next
            var child = ittfModel.children[f_count++]
            if !child
                #
                    # The baseDestFolder is ready
                return
                    _ that.getPackiFilesFromJsonFactory
                        @ ''
                        a_cb(readyPackiFiles)
                            r_cb( readyPackiFiles )
            $$ loog "Object.keys(child)", Object.keys(child)
            $$ loog 'child', child.name, child.value
            if child.name == '$file'
                try
                    _ processIttfFile
                        @ child
                        @ baseDestFolder
                        a_cb()
                            _ next
                catch ex
                    r_cb_wz_err( WizziFactoryError, ittfModelToFolder, ex )
                        {
                            @ message 'Processing $file. See inner error'
                            { parameter
                                @ outputFileName child.value
            elif child.name == '$plain'
                try
                    _ processPlainFile
                        @ child
                        @ baseDestFolder
                        a_cb()
                            _ next
                catch ex
                    r_cb_wz_err( WizziFactoryError, ittfModelToFolder, ex )
                        {
                            @ message 'Processing $plain. See inner error'
                            { parameter
                                @ outputFileName child.value
            else
                _ next

        function processIttfFile
            param node
            param baseDestFolder
            param callback
            var outputPath
                _ path.join
                    @ baseDestFolder
                    @ node.value
            var sb = []
            foreach child in node.children
                _ processIttfContent
                    @ sb
                    @ child
                    @ 0
            _ fileService.write
                @ outputPath
                _ sb.join
                    @ '\n'
                @ callback

        function processIttfContent
            param sb
            param node
            param indent
            _ sb.push
                @ new Array(indent+1).join(' ') + decode(node.name) + ' ' + decode(node.value)
            foreach child in node.children
                _ processIttfContent
                    @ sb
                    @ child
                    @ indent + 4

        function processPlainFile
            param node
            param baseDestFolder
            param callback
            var outputPath
                _ path.join
                    @ baseDestFolder
                    @ node.value
            if node.children.length == 1 && node.children[0].name == '$from'
                _ fileService.read
                    @ packiFilePrefix + node.children[0].value 
                    a_cb( content )
                        $$ loog 'processPlainFile.content', content
                        _ fileService.write
                            @ outputPath
                            $$ @ 'Content of ' + node.value + ' from ' + node.children[0].value 
                            @ content
                            @ callback
            else
                r_cb_wz_err( WizziFactoryError, ittfModelToFolder )
                    {
                        @ message 'Missing $from node processing $plain file.'
                        { parameter
                            @ outputFileName node.value

        function decode
            param text
            set text = verify.replaceAll(text, "${'$'}", "$")
            return verify.replaceAll(text, "£'('£", "(")