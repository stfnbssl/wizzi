module wizzi@${wzCtx.version}.wizziFactory
	kind es6
	+
	var util = require('util')
	var path = require('path')
	var stringify = require('json-stringify-safe')
	var jsonDiff = require('json-diff')
    var async = require('async')
	+
	var repo = require('@wizzi/repo')
	var mtree = require('@wizzi/mtree')
	var acl = require('../acl')
	var productionOptions = require('../production/options')
	var ProductionManager = null
	var GenContext = require('../production/artifact/genContext')
	var verify = require('@wizzi/utils').verify
	var file = require('@wizzi/utils').file
	var packi = require('@wizzi/utils').packi
	var JsonComponents = require('@wizzi/repo').JsonComponents
    const packiUtils = require('./packiUtils')
	var StringWriter = require('../util/stringWriter')
	var constants = require('../constants')
	var errors = require('../errors')
	var log = require('../util/log')(module)
	var PluginsManager = require('./pluginsManager')
	var StorePool = require('./storePool')
	var interpolateFilename = require('../util/interpolateFilename')	
	var buildCheatsheet = require('./cheatsheet').buildCheatsheet
	var bootModelUri = "../wizzi/models/bootstrap/wfschema-boot-model"
	var bootModelDefUri = "../wizzi/models/bootstrap/wfschema-boot-modelDef"
	var BootWizziSchema = null
	var ModelInfo = null
	var AsyncModelLoader = null
	+
    const 
        {
            @ packiFilePrefix
            @ packiFilePrefixExtract
            @ metaProductionTempFolder
            @ metaProductionWizziFolder
        = constants
    +
    var myname = 'wizzi.services.wizzifactory'
    +
	class WizziFactory
		ctor
			param user
			param role
			set this.__type = 'WizziFactory'
            set this.__version = '${wzCtx.version}'
			set this.user = user
			set this.role = role
			set this.storeKind = null
			set this.fileService = null
			set this.storePool = new StorePool(this)
			# loadMTree is a method of this class, we need an alias
			set this.__loadMTree = null
			# loadMTreeFrontMatter is a method of this class, we need an alias
			set this.__loadMTreeFrontMatter = null
			# loadMTreeRaw is a method of this class, we need an alias
			set this.__loadMTreeRaw = null
			# loadMTreeBuildUpScript is a method of this class, we need an alias
			set this.__loadMTreeBuildUpScript = null
			set this.pluginsManager = null
			set this.modelLoaders = {}
			set this.modelTransformers = {}
			set this.artifactGenerators = {}
            set this.wizzifiers = {}
			set this.schemaDefinitions = {}
			set this.cheatsheets = {}
			set this.globalContext = {}
            set this.metasManager = null
            set this.verbose = false

		$include wizziFactory/initialize
		$include wizziFactory/terminate
		$include wizziFactory/request-context
		$include wizziFactory/mtree-loading
		$include wizziFactory/model-loading
		$include wizziFactory/model-transformation
		$include wizziFactory/artifact-generation
        $include wizziFactory/folder-generation
		$include wizziFactory/schema-definition
        $include wizziFactory/wizzification
		$include wizziFactory/cheatsheet
		$include wizziFactory/compare
		$include wizziFactory/modelDoms-generation
		$include wizziFactory/productionStep-execution
		$include wizziFactory/wizzi-job-execution
        $include wizziFactory/meta-generation
        $include wizziFactory/meta-execution
        $include wizziFactory/meta-manager
		$include wizziFactory/ittf-model-to-folder
		$include wizziFactory/json-factory
		$include wizziFactory/fs-factory
		$include wizziFactory/getInfo
        $include wizziFactory/getProvides
	
	$include wizziFactory/detectSchema

	function getProductionManager
		if ProductionManager == null
			set ProductionManager = require('../production/manager')
		return ProductionManager

	var DEFAULT_ARTIFACTS
		{
			@ css 'css/document'
			@ graphql 'graphql/docs'
			@ html 'html/document'
			@ js 'js/module'
			@ json 'json/document'
			@ scss 'scss/document'
			@ text 'text/document'
			@ ts 'ts/module'
			@ xml 'xml/document'
            @ ittf 'ittf/document'
			@ vtt 'vtt/document'
			@ vue 'vue/document'

	function getDefaultArtifact
		param schema
		return DEFAULT_ARTIFACTS[schema]

	set module.exports
		{
			@ createFactory
				function
					param user
					param role
					param options
					param callback
					# loog 'wizzi.wizziFactory.createFactory.options', options
					if typeof(callback) === 'undefined' &&
						\b typeof(options) === 'undefined'
						# no ACL required
						set options = user
						set callback = role
					# loog 'wizzi.wizziFactory.createFactory.globalContext', options.globalContext
					var wf
						new WizziFactory
					_ wf.initialize
						@ options
						@ callback
