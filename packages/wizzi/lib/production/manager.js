/*
    artifact generator: C:\Users\stfnb\AppData\Roaming\npm\node_modules\@wizzi\cli\node_modules\@wizzi\plugin.js\lib\artifacts\js\module\gen\main.js
    package: @wizzi/plugin.js@0.8.9
    primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi\packages\wizzi\.wizzi\lib\production\manager.js.ittf
    utc time: Thu, 02 Jan 2025 12:51:28 GMT
*/
// generated by wizzi.plugin.js.artifacts.js.module.gen.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var verify = require('@wizzi/utils').verify;
var path = require('path');
var util = require('util');
var assert = require('assert');
var async = require('async');
var verify = require('@wizzi/utils').verify;
var file = require('@wizzi/utils').file;
var fail = require('@wizzi/utils').fail;
var GenContext = require('./artifact/genContext');
var StringWriter = require('../util/stringWriter');
var log = require('../util/log')(module);
var options = require('./options');
var ProductionContext = require("./context").ProductionContext;
var GlobalModelInfo = require('../globalModel/globalModelInfo').GlobalModelInfo;
var ProductionStep = require('./step').ProductionStep;
var Runner = require('./runner').Runner;
var PreLoader = require('./preLoader').PreLoader;
var WzjobLoader = require('./wzjob/wzjobLoader').WzjobLoader;
var AsyncRecurseWzjobLoad = require('./wzjob/wzjobLoader').AsyncRecurseWzjobLoad;
var ArtifactPersister = require('./persister').ArtifactPersister;
var thisWizziPackage = require('../../index');
// var legacy = require('../../legacy')
// var Logger = require('../services/logger')
/**
     The wizzi.productionManager is the orchestrator of multi-part productions.
     It executes `wzjob` wizzi models or production steps built programmaticaly.
*/
/**
    
     The 'meat' of a production is the execution of a `wizzi/production/ProductionStep` instance
     performed by an instance of a `wizzi/production/Runner`.
     `wizzi/production/ProductionStep`(s) are declared to the `wizzi/production/ProductionManager`
     in these ways:
     . adding a request for loading a `wzjob` wizzi model.
     . adding a `wizzi/production/ProductionStep` created programmaticaly.
     When the 'run' method is called the production manager:
     1. loads the requested wzjobModels.
     A wzjobModel can contain ProductionStepConfigs(s) and others `wzjob` requests.
     Every `wzjob` request is loaded until we have ProductionStepConfig(s) only.
     2  ProductionStepConfig(s) are transformed in instances of `wizzi/production/ProductionStep(s)
     3  A `wizzi/production/Runner` is instantiated and asynchronously executed for every
     `wizzi/production/ProductionStep`.
    
     addProductionStepRequest(productionStepConfig|productionStep)
     addWzjobRequest(wzJobConfig)
     getLoadModel(schemaName)
     getWizziSchemaObject(schemaName)
     getModelTransformer(transName)
     getArtifactGenerator(artifactName)
     run:AsyncMethod
     persistToFile:AsyncMethod
    
    
*/
var ProductionManager = (function () {
    function ProductionManager(wizziFactory, options) {
        _classCallCheck(this, ProductionManager);
        if (verify.isObject(wizziFactory) === false) {
            throw new Error(error(
                'InvalidArgument', 'ctor', { parameter: 'wizziFactory', message: 'The wizziFactory parameter must be an object. Received: ' + wizziFactory }
            ));
        }
        if (verify.isObject(options) === false) {
            throw new Error(error(
                'InvalidArgument', 'ctor', { parameter: 'options', message: 'The options parameter must be an object. Received: ' + options }
            ));
        }
        assert.strictEqual(wizziFactory.__type, 'WizziFactory', 'param wizziFactory must be of type WizziFactory');
        this.wizziFactory = wizziFactory;
        this.options = options;
        this.globalModelInfos = [];
        this.productionSteps = [];
        this.productionStepsFromWzJob = [];
        this.jobRequests = [];
        this.productionContext = new ProductionContext(options);
        this.wzjobLoadModel = null;
        log.setLevel(options.verbose || 0);
        this.___state = {
            models: {}, 
            pman: this, 
            pcx: this.productionContext
         };
        // set this.logger = new Logger()
        this.productionName = 'production';
    }
    /**
         CTOR_PARAMS
         { wizziFactory
         { options
         boolean verbose
         boolean trace
         string basedir // uri
         { dumps
         string dumpsBaseFolder
         { mTreeBuildUpScript
         boolean dump
         string dumpsBaseFolder
    */
    /**
         Add a global model config from a configuration object
         declared in a "model" element of a "wzjob" wizzi model.
         It may also be built programmatically.
        
         params
         { globalModelInfoConfig
    */
    ProductionManager.prototype.addGlobalModelRequest = function(globalModelInfoConfig) {
        if (verify.isObject(globalModelInfoConfig) === false) {
            return error(
                'InvalidArgument', 'addGlobalModelRequest', { parameter: 'globalModelInfoConfig', message: 'The globalModelInfoConfig parameter must be an object. Received: ' + globalModelInfoConfig }
            );
        }
        if (GlobalModelInfo.isGlobalModelConfig(globalModelInfoConfig)) {
            var globalModelInfo = new GlobalModelInfo(globalModelInfoConfig);
            globalModelInfo.initialize(this);
            this.globalModelInfos.push(globalModelInfo);
        }
        else {
            throw new Error("wizzi.production.productionManager.addGlobalModelRequest. The 'globalModelInfoConfig' parameter is not a valid global model config: " + util.inspect(globalModelInfoConfig));
        }
    }
    /**
         Add a production step config/instance to be run by a Runner instance.
         The productionStepConfig parameter can be
         . A production step config declared in a "artifact" element of a "wzjob" wizzi model.
         . A production step config instance created programmatically.
         . A productionStep instance.
    */
    ProductionManager.prototype.addProductionStepRequest = function(productionStepConfig) {
        if (verify.isObject(productionStepConfig) === false) {
            return error(
                'InvalidArgument', 'addProductionStepRequest', { parameter: 'productionStepConfig', message: 'The productionStepConfig parameter must be an object. Received: ' + productionStepConfig }
            );
        }
        if (ProductionStep.isProductionConfig(productionStepConfig)) {
            var productionStep = new ProductionStep(productionStepConfig);
            productionStep.initialize(this);
            this.productionSteps.push(productionStep);
        }
        else if (ProductionStep.isProductionInstance(productionStepConfig)) {
            productionStep.initialize(this);
            this.productionSteps.push(productionStepConfig);
        }
        else {
            throw new Error('ProductionManager.addProductionStepRequest. The parameter `productionStepConfig` is not a production step config: ' + util.inspect(productionStepConfig));
        }
    }
    /**
         Add a `wzjob` request
         Called by wizzi.executeWizziJob or wizziFactory.executeJob
         params
         { jobRequest
         { wzjob
         string ittfDocumentUri
    */
    ProductionManager.prototype.addWzjobRequest = function(jobRequest) {
        if (verify.isObject(jobRequest) === false) {
            return error(
                'InvalidArgument', 'addWzjobRequest', { parameter: 'jobRequest', message: 'The jobRequest parameter must be an object. Received: ' + jobRequest }
            );
        }
        if (verify.isObject(jobRequest.wzjob) === false) {
            return error(
                'InvalidArgument', 'addWzjobRequest', { parameter: 'jobRequest.wzjob', message: 'The jobRequest.wzjob parameter must be an object. Received: ' + jobRequest.wzjob }
            );
        }
        if (verify.isNotEmpty(jobRequest.wzjob.ittfDocumentUri) === false) {
            return error(
                'InvalidArgument', 'addWzjobRequest', { parameter: 'jobRequest.wzjob.ittfDocumentUri', message: 'The jobRequest.wzjob.ittfDocumentUri parameter must be a string. Received: ' + jobRequest.wzjob.ittfDocumentUri }
            );
        }
        if (verify.isNullOrUndefined(jobRequest.options) === false) {
            if (verify.isObject(jobRequest.options) === false) {
                return error(
                    'InvalidArgument', 'addWzjobRequest', { parameter: 'jobRequest.options', message: 'The jobRequest.options parameter must be an object. Received: ' + jobRequest.options }
                );
            }
        }
        // loog 'wizzi.productionManager.addWzjobRequest.jobRequest', jobRequest
        jobRequest.__pman = this;
        jobRequest.options = Object.assign({}, this.options, jobRequest.options || {})
        ;
        this.jobRequests.push(jobRequest);
    }
    ProductionManager.prototype.initialize = function(callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'initialize', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        async.mapSeries(this.jobRequests, AsyncInitializeJobRequests.run, (err, notUsed) => {
            if (err) {
                console.log("[31m%s[0m", err);
                return callback(err);
            }
            this.preLoad(callback)
        }
        )
    }
    ProductionManager.prototype.preLoad = function(callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'preLoad', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        async.mapSeries(this.globalModelInfos, AsyncGlobalModelPreLoader.run, (err, notUsed) => {
            if (err) {
                console.log("[31m%s[0m", err);
                return callback(err);
            }
            async.mapSeries(this.productionSteps, AsyncArtifactCollectionPreLoader.run, (err, notUsed) => {
                if (err) {
                    console.log("[31m%s[0m", err);
                    return callback(err);
                }
                callback(null);
            }
            )
        }
        )
    }
    ProductionManager.prototype.run = function(callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'run', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        var self = this;
        this.initialize(function(err, notUsed) {
            if (err) {
                return callback(err);
            }
            // run production step requests
            // loog 'wizzi.productionManager.self.productionSteps.length', self.productionSteps.length
            var checkLoop = 0;
            function doRun() {
                async.mapSeries(self.productionSteps, AsyncRunner.run, function(err, result) {
                    if (err) {
                        return callback(err);
                    }
                    self.productionSteps = result;
                    process.nextTick(() => {
                        if (self.productionContext.hasNewRunningContextValues() && checkLoop < 20) {
                            checkLoop++;
                            console.log('Running context values have been changed. Rerunning production steps. Times', checkLoop);
                            self.productionContext.acceptNewRunningContextValues();
                            doRun();
                        }
                        else {
                            callback(null, result);
                        }
                    }
                    )
                })
            }
            doRun();
        })
    }
    ProductionManager.prototype.terminate = function() {
        if (this.wizziFactory) {
            this.wizziFactory.terminate();
        }
    }
    ProductionManager.prototype.persistToFile = function(callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'persistToFile', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        // loog 'ProductionManager.persistToFile.this.productionSteps.length', this.productionSteps.length
        var self = this;
        async.mapSeries(this.productionSteps, AsyncPersisterToFile.run, function(err, result) {
            // loog 'persistToFile err, result', err, result
            if (err) {
                return callback(err);
            }
            // loog 'ProductionManager.persistToFile.persisted artifacts', util.inspect(result, { depth: 1 })
            var i, i_items=self.productionSteps, i_len=self.productionSteps.length, ps;
            for (i=0; i<i_len; i++) {
                ps = self.productionSteps[i];
                ps.terminate();
            }
            callback(null, result);
        })
    }
    ProductionManager.prototype.relPath = function(filepath) {
        return filepath.substr(this.options.basedir.length + 1);
    }
    ProductionManager.prototype.getLoadModel = function(schemaName) {
        if (verify.isNotEmpty(schemaName) === false) {
            return error(
                'InvalidArgument', 'getLoadModel', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            );
        }
        // loog 'wizzi.productionManager.getLoadModel.globalContextObject', this.globalContextObject
        return this.wizziFactory.getLoadModel(schemaName, this.globalContextObject);
    }
    ProductionManager.prototype.getSchemaDefinition = function(schemaName) {
        if (verify.isNotEmpty(schemaName) === false) {
            return error(
                'InvalidArgument', 'getSchemaDefinition', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            );
        }
        return this.wizziFactory.getSchemaDefinition(schemaName, this.globalContextObject);
    }
    ProductionManager.prototype.getModelTransformer = function(transformerName) {
        if (verify.isNotEmpty(transformerName) === false) {
            return error(
                'InvalidArgument', 'getModelTransformer', { parameter: 'transformerName', message: 'The transformerName parameter must be a string. Received: ' + transformerName }
            );
        }
        return this.wizziFactory.getModelTransformer(transformerName, this.globalContextObject);
    }
    ProductionManager.prototype.getArtifactGenerator = function(artifactName) {
        if (verify.isNotEmpty(artifactName) === false) {
            return error(
                'InvalidArgument', 'getArtifactGenerator', { parameter: 'artifactName', message: 'The artifactName parameter must be a string. Received: ' + artifactName }
            );
        }
        return this.wizziFactory.getArtifactGenerator(artifactName, this.globalContextObject);
    }
    ProductionManager.prototype.loadWzjob = function(ittfDocumentUri, context, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'loadWzjob', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(ittfDocumentUri) === false) {
            return callback(error(
                'InvalidArgument', 'loadWzjob', { parameter: 'ittfDocumentUri', message: 'The ittfDocumentUri parameter must be a string. Received: ' + ittfDocumentUri }
            ));
        }
        if (verify.isObject(context) === false) {
            return callback(error(
                'InvalidArgument', 'loadWzjob', { parameter: 'context', message: 'The context parameter must be an object. Received: ' + context }
            ));
        }
        // called by WzjobLoader
        // loog 'wizzi.production.productionManager.loadWzjob.ittfDocumentUri', ittfDocumentUri
        if (!this.wzjobLoadModel) {
            this.wzjobLoadModel = this.getLoadModel('wzjob')
            ;
            
            // loog 'wizzi.checked_call_set.__is_error ', this.wzjobLoadModel
            if (this.wzjobLoadModel && this.wzjobLoadModel.__is_error) {
                return callback(this.wzjobLoadModel);
            }
        }
        var ctx = this.wizziFactory.createLoadContext(context, this);
        // loog 'wizzi.production.productionManager.loadWzjob.context', context
        // loog 'wizzi.production.productionManager.loadWzjob.ctx,ctx.mTreeBuildUpContext', Object.keys(ctx), ctx.mTreeBuildUpContext, this.wizziFactory.globalContext
        // loog 'wizzi.production.productionManager.loadWzjob.ctx.__productionManager.globalContext()', ctx.__productionManager.globalContext()
        this.wzjobLoadModel(ittfDocumentUri, this.wizziFactory.createLoadContext(context, this), callback)
    }
    ProductionManager.prototype.aclStat = function(value) {
        if (typeof(value) === 'undefined') {
            return this.aclStatObject;
        }
        else {
            this.aclStatObject = value;
            this.productionContext.setAclStat(value);
        }
    }
    ProductionManager.prototype.globalContext = function(value) {
        if (typeof(value) === 'undefined') {
            return this.globalContextObject || {};
        }
        else {
            this.globalContextObject = value;
        }
    }
    ProductionManager.prototype.setStateModel = function(key, value) {
        this.___state.models[key] = value;
    }
    ProductionManager.prototype.getLogState = function() {
        var logState = {
            models: {}
         };
        // loog 'wizzi-factory/productionManager/state models length', this.___state.models.length
        for (var m in this.___state.models) {
            var mo = this.___state.models[m];
            var modelState = {};
            logState[m] = modelState;
            for (var k in mo) {
                // loog 'wizzi-factory/productionManager/state model prop', k
                
                // set modelState.ittfDocumentDatas = mo.loadHistory.ittfDocumentDatas
                if (mo.loadHistory) {
                    modelState.ittfSources = mo.loadHistory.getIttfDocuments();
                    var i, i_items=mo.loadHistory.ittfDocumentDatas, i_len=mo.loadHistory.ittfDocumentDatas.length, idm;
                    for (i=0; i<i_len; i++) {
                        idm = mo.loadHistory.ittfDocumentDatas[i];
                        var idm_o = mo.loadHistory.ittfDocumentDatas[idm];
                        delete idm_o.mTree
                        for (var idm_k in idm_o) {
                            // loog 'wizzi-factory/productionManager/state model loadHistory ittfDocumentData prop', idm_k
                        }
                    }
                    for (var z in mo.loadHistory) {
                        // loog 'wizzi-factory/productionManager/state model loadHistory prop', z
                    }
                    if (mo.loadHistory.ittfSources) {
                        for (var z in mo.loadHistory.ittfSources) {
                            // loog 'wizzi-factory/productionManager/state model ittfSources prop', z
                        }
                    }
                }
            }
        }
        return logState;
    }
    ProductionManager.prototype.go_generateArtifact = function(artifactName, artifactContext, wizziModelInstance, callback) {
        var self = this;
        var generator = this.getArtifactGenerator(artifactName);
        if (generator == null) {
            var msg = 'ProductionManager.go_generateArtifact cannot find generator for artifact: ' + artifactName;
            fail.warn(msg);
            throw new Error(msg);
        }
        var genContext = new GenContext({ options: options(null, { data: artifactContext.__data }) });
        new generator.gen(wizziModelInstance, genContext, function(err) {
            if (err) {
                var msg = util.inspect(err, { depth: null});
                fail.warn(msg);
                throw new Error(msg);
            }
            var sw = new StringWriter();
            genContext.toStream(sw);
            callback(null, sw.toString());
        });
    }
    ProductionManager.prototype.generateArtifact = function(schemaName, artifactName, ittfDocumentUri, modelContext, artifactContext, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'generateArtifact', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(schemaName) === false) {
            return callback(error(
                'InvalidArgument', 'generateArtifact', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            ));
        }
        if (verify.isNotEmpty(artifactName) === false) {
            return callback(error(
                'InvalidArgument', 'generateArtifact', { parameter: 'artifactName', message: 'The artifactName parameter must be a string. Received: ' + artifactName }
            ));
        }
        if (verify.isNotEmpty(ittfDocumentUri) === false) {
            return callback(error(
                'InvalidArgument', 'generateArtifact', { parameter: 'ittfDocumentUri', message: 'The ittfDocumentUri parameter must be a string. Received: ' + ittfDocumentUri }
            ));
        }
        if (verify.isObject(modelContext) === false) {
            return callback(error(
                'InvalidArgument', 'generateArtifact', { parameter: 'modelContext', message: 'The modelContext parameter must be an object. Received: ' + modelContext }
            ));
        }
        if (verify.isObject(artifactContext) === false) {
            return callback(error(
                'InvalidArgument', 'generateArtifact', { parameter: 'artifactContext', message: 'The artifactContext parameter must be an object. Received: ' + artifactContext }
            ));
        }
        var self = this;
        var loadModel = this.getLoadModel(schemaName);
        if (loadModel == null) {
            var msg = 'ProductionManager.generateArtifact cannot find loadModel for schema: ' + schemaName + ' for artifact ' + ittfDocumentUri;
            fail.warn(msg);
            throw new Error(msg);
        }
        if (!loadModel) {
            var msg = 'ProductionManager.generateArtifact. Missing load method in loadModel for schema: ' + schemaName + ' for artifact ' + ittfDocumentUri;
            fail.warn(msg);
            throw new Error(msg);
        }
        else {
            loadModel(ittfDocumentUri, modelContext, function(err, wizziModelInstance) {
                // loog 'ProductionManager.generateArtifact', err
                if (err) {
                    var msg = 'Error loading IttfDocument: ' + ittfDocumentUri + '\n' + util.inspect(err, { depth: null});
                    fail.warn(msg);
                    throw new Error(msg);
                }
                self.go_generateArtifact(artifactName, artifactContext, wizziModelInstance, callback)
            })
        }
    }
    return ProductionManager;
})();

/**
    async run a wizzi job request
     from jobRequest
*/
/**
     called by the productionManager.initialize method
     . loads a requested wzjob model and
     . add its productionSteps objects to the productionManager productionSteps collection and
     . initializes them
*/
var AsyncInitializeJobRequests = {
    run: function(jobRequest, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', '', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(jobRequest) === false) {
            return callback(error(
                'InvalidArgument', '', { parameter: 'jobRequest', message: 'The jobRequest parameter must be an object. Received: ' + jobRequest }
            ));
        }
        if (verify.isObject(jobRequest.__pman) === false) {
            return callback(error(
                'InvalidArgument', '', { parameter: 'jobRequest.__pman', message: 'The jobRequest.__pman parameter must be an object. Received: ' + jobRequest.__pman }
            ));
        }
        if (verify.isObject(jobRequest.wzjob) === false) {
            return callback(error(
                'InvalidArgument', '', { parameter: 'jobRequest.wzjob', message: 'The jobRequest.wzjob parameter must be an object. Received: ' + jobRequest.wzjob }
            ));
        }
        if (verify.isNotEmpty(jobRequest.wzjob.ittfDocumentUri) === false) {
            return callback(error(
                'InvalidArgument', '', { parameter: 'jobRequest.wzjob.ittfDocumentUri', message: 'The jobRequest.wzjob.ittfDocumentUri parameter must be a string. Received: ' + jobRequest.wzjob.ittfDocumentUri }
            ));
        }
        var pman = jobRequest.__pman;
        // loog 'AsyncInitializeJobRequests.pman.globalContext()', pman.globalContext()
        var wzjobIttfDocumentUri = jobRequest.wzjob.ittfDocumentUri;
        pman.productionName += '_' + path.basename(wzjobIttfDocumentUri);
        // loog 'wizzi.production.asyncInitializeJobRequests.productionName', pman.productionName
        // The wzjobLoader instance is created here and used
        // in any case of recursive request of `wzjob` executions.
        var wzjobLoader = new WzjobLoader(pman);
        var wzjobLoadRequest = {
            model: {
                src: wzjobIttfDocumentUri
             }, 
            wzjobLoader: wzjobLoader
         };
        AsyncRecurseWzjobLoad(wzjobLoadRequest, function(err, result) {
            if (err) {
                return callback(err);
            }
            // loog 'AsyncRecurseWzjobLoad.globalModelInfoConfigs', result.globalModelInfoConfigs.length, 'productionStepConfigs', result.productionStepConfigs.length
            var i, i_items=result.globalModelInfoConfigs, i_len=result.globalModelInfoConfigs.length, globalModelInfoConfig;
            for (i=0; i<i_len; i++) {
                globalModelInfoConfig = result.globalModelInfoConfigs[i];
                // loog 'wizzi.production.asyncInitializeJobRequests.globalModelInfoConfig', util.inspect(globalModelInfoConfig, { depth: 2 })
                globalModelInfoConfig.wzjob = wzjobIttfDocumentUri;
                if (pman.options.trace) {
                    console.log('ProductionManager.initialize.globalModelInfoConfig', globalModelInfoConfig.toString());
                }
                pman.addGlobalModelRequest(globalModelInfoConfig);
            }
            var i, i_items=result.productionStepConfigs, i_len=result.productionStepConfigs.length, productionStepConfig;
            for (i=0; i<i_len; i++) {
                productionStepConfig = result.productionStepConfigs[i];
                // loog 'wizzi.production.asyncInitializeJobRequests.productionStepConfig', util.inspect(productionStepConfig, { depth: 2 })
                productionStepConfig.wzjob = wzjobIttfDocumentUri;
                if (pman.options.trace) {
                    console.log('ProductionManager.initialize.productionStepConfig', productionStepConfig.toString());
                }
                pman.addProductionStepRequest(productionStepConfig);
            }
            callback(null);
        })
    }
 };
/**
    async global model pre loader
     Pre loads
     . global models (wzjob "model" elements with an "exportName" attribute)
*/
var AsyncGlobalModelPreLoader = {
    run: function(globalModelInfo, callback) {
        // _ log.info('Started async global model preload: ' + globalModelInfo.name)
        var loader = new PreLoader(globalModelInfo);
        loader.runGlobalModel(function(err, modelInstance) {
            if (err) {
                err.modelInfo = globalModelInfo.toString();
                return callback(err);
            }
            // _ log.info('Ended async global model preload: ' + globalModelInfo.name)
            callback(null, {
                exportName: globalModelInfo.exportName, 
                modelInstance: modelInstance
             })
        })
    }
 };
/**
    async artifact collection pre loader
     Pre loads
     . artifact front matters (wzjob "artifact" elements with a "collection" attribute)
*/
var AsyncArtifactCollectionPreLoader = {
    run: function(productionStep, callback) {
        // loog 'Started async artifact collection pre load', productionStep.collection
        // _ log.info('Started async artifact collection pre load: ' + productionStep.collection)
        if (verify.isEmpty(productionStep.collection)) {
            return callback(null);
        }
        // _ log.info('Started async artifact collection pre load: ' + productionStep.name)
        var preloader = new PreLoader(productionStep);
        preloader.runArtifactCollection(function(err, operResult) {
            if (err) {
                err.productionStep = productionStep.toString();
                return callback(err);
            }
            // _ log.info('Ended async artifact collection pre load: ' + productionStep.name)
            callback(null, operResult);
        })
    }
 };
/**
    async run a production step
     from a productionStep object
*/
var AsyncRunner = {
    run: function(productionStep, callback) {
        // _ log.info('Started async run artifact: ' + productionStep.name)
        var runner = new Runner(productionStep);
        runner.run(function(err, operResult) {
            
            // set err.ProfuctionManagerAsyncRunnerStack = (new Error()).stack
            if (err) {
                err.productionStep = productionStep.toString();
                return callback(err);
            }
            // _ log.info('Ended async run artifact: ' + productionStep.name)
            callback(null, operResult);
        })
    }, 
    runFrontMatter: function(productionStep, callback) {
        // _ log.info('Started async runFrontMatter artifact: ' + productionStep.name)
        var runner = new Runner(productionStep);
        runner.runFrontMatter(function(err, operResult) {
            
            // set err.ProfuctionManagerAsyncRunnerStack = (new Error()).stack
            if (err) {
                err.productionStep = productionStep.toString();
                return callback(err);
            }
            // _ log.info('Ended async runFrontMatter artifact: ' + productionStep.name)
            callback(null, operResult);
        })
    }
 };
/**
    async persist one or more artifact productions
     from an productionStep object.
     uses an ArtifactPersister instance
*/
var AsyncPersisterToFile = {
    run: function(productionStep, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', '', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(productionStep) === false) {
            return callback(error(
                'InvalidArgument', '', { parameter: 'productionStep', message: 'The productionStep parameter must be an object. Received: ' + productionStep }
            ));
        }
        if (verify.isObject(productionStep.productionManager) === false) {
            return callback(error(
                'InvalidArgument', '', { parameter: 'productionStep.productionManager', message: 'The productionStep.productionManager parameter must be an object. Received: ' + productionStep.productionManager }
            ));
        }
        // loog 'Started async persist to file artifact: ', productionStep.name
        var persister = new ArtifactPersister(productionStep);
        persister.toFile(function(err, operResult) {
            if (err) {
                return callback(err);
            }
            // loog 'Ended async persist to file artifact: ', productionStep.name
            callback(null, operResult);
        })
    }
 };
module.exports = ProductionManager;
/**
  params
    string code
      # the error name or number
    string method
    string message
      # optional
    { innerError
      # optional
*/
function error(code, method, message, innerError) {
    var parameter = null;
    if (verify.isObject(message)) {
        parameter = message.parameter;
        message = message.message;
    }
    return verify.error(innerError, {
        name: ( verify.isNumber(code) ? 'Err-' + code : code ),
        method: 'wizzi.productionManager.' + method,
        parameter: parameter,
        sourcePath: __filename
    }, message || 'Error message unavailable');
}