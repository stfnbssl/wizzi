/*
    artifact generator: C:\Users\stfnb\AppData\Roaming\npm\node_modules\@wizzi\cli\node_modules\@wizzi\plugin.js\lib\artifacts\js\module\gen\main.js
    package: @wizzi/plugin.js@0.8.9
    primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi\packages\wizzi\.wizzi\lib\production\runner.js.ittf
    utc time: Thu, 02 Jan 2025 12:51:28 GMT
*/
// generated by wizzi.plugin.js.artifacts.js.module.gen.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var assert = require('assert');
var path = require('path');
var util = require('util');
var verify = require('@wizzi/utils').verify;
var log = require('../util/log')(module)
;
var GenContext = require('./artifact/genContext');
var AsyncFrontMatterLoader = require('./model/asyncFrontMatterLoader');
var AsyncModelLoader = require('./model/asyncModelLoader');
var AsyncArtifactGenerator = require('./artifact/asyncArtifactGenerator').AsyncArtifactGenerator;
var AsyncWizziModelDomRunner = require('./modelDom/asyncWizziModelDomRunner');

/**
     Async production step runner.
     A runner instance runs a single productionStep.
     Input: a ProductionStep (constructor injected).
     Output: the ProductionStep enriched with (one or many) genContext(s),
     ready to be persisted (callback ok result).
     A Runner can run
     a WzJob (a wizzi job)
     a WfSchema (a wizzi model dom generation)
     a ModelArtifact
     a ModelCollectionArtifact
     a CodeWriteArtifact
     a FinalArtifact (a simple copy from source to destination)
     a FolderModel (an Ittf Document that generates a Folder Structure of Ittf Documents)
*/

function logme() {
    if (false) {
        console.log.apply(console, arguments);
    }
}

var Runner = (function () {
    function Runner(productionStep) {
        _classCallCheck(this, Runner);
        this.productionStep = productionStep;
        log.setLevel((productionStep.options.verbose || 0));
    }
    Runner.prototype.run = function(callback) {
        if (this.productionStep.isIttfDocumentProduction()) {
            this._runOnIttfDocumentProduction(this.productionStep.ittfDocumentProduction, callback)
        }
        else if (this.productionStep.modelInfo) {
            this._runOnModelInfo(this.productionStep.modelInfo, callback)
        }
        else {
            this._runOnContextInfos(this.productionStep.contextInfos, callback)
        }
    }
    Runner.prototype._runOnContextInfos = function(contextInfos, callback) {
        if (this.productionStep.isCodeWriteArtifact()) {
            this.runCodeWriteArtifact(this.productionStep.modelInfo, this.productionStep.gen, callback)
        }
        else {
            return callback(error('999', '_runOnContextInfos', 'Artifact is in an invalid state: ' + util.inspect(this.productionStep.getState(), {depth: 2})));
        }
    }
    Runner.prototype._runOnModelInfo = function(modelInfo, callback) {
        var gen = this.productionStep.gen;
        if (this.productionStep.isWizziModelDomArtifact()) {
            this.runWizziModelDomArtifact(modelInfo, callback)
        }
        else if (this.productionStep.isWizziModelArtifact()) {
            this.runWizziModelArtifact(modelInfo, gen, callback)
        }
        else if (this.productionStep.isWizziModelToFolderArtifact()) {
            this.runWizziModelToFolderArtifact(modelInfo, gen, callback)
        }
        else if (this.productionStep.isModelCollectionArtifact()) {
            this.runModelCollectionArtifact(modelInfo, gen, callback)
        }
        else if (this.productionStep.isFinalArtifact()) {
            this.runFinalArtifact(modelInfo, callback)
        }
        else {
            return callback(error('999', '_runOnModelInfo', 'The production step is in an invalid state: ' + util.inspect(this.productionStep.getState(), {depth: 2})));
        }
    }
    Runner.prototype._runOnIttfDocumentProduction = function(ittfDocumentProduction, callback) {
        if (ittfDocumentProduction.productionActionType == "loadModelAndGenerateArtifact") {
            this.runLoadModelAndGenerateArtifact(ittfDocumentProduction, callback)
        }
        else {
            return callback(error('999', '_runOnIttfDocumentProduction', 'Invalid `ittfDocumentProduction.productionActionType`. The production step is in an invalid state: ' + util.inspect(this.productionStep.getState(), {depth: 2})));
        }
    }
    Runner.prototype.runWizziModelDomArtifact = function(modelInfo, callback) {
        log.warn('runWizziModelDomArtifact ' + this.productionStep.name);
        var outputPackageFolder = this.productionStep.getDestinationUri();
        // loog 'wizzi.production.runner.runWizziModelDomArtifact.outputPackageFolder', outputPackageFolder
        modelInfo.getModelInfos({
            final: false
         }, (err, modelInfos) => {
            if (err) {
                console.log("[31m%s[0m", err);
                return callback(err);
            }
            if (modelInfos.length != 1) {
                return callback(error('999', 'runWizziModelDomArtifact', 'Expected exactly one wizzi.model.modelInfo. Received: ' + modelInfos.length));
            }
            var wfschemaIttfDocumentUri = modelInfos[0].srcFullPath();
            var basenameParts = path.basename(wfschemaIttfDocumentUri).split('.');
            if (basenameParts.length != 3) {
                return callback(error('999', 'runWizziModelDomArtifact', "The name of the source 'wfschema' ittf document must be in the format '<schema-name>.wfschema.ittf'. Received: " + path.basename(wfschemaIttfDocumentUri)));
            }
            var schemaName = basenameParts[0];
            var wmtRequest = {
                modelInfo: modelInfos[0], 
                schemaName: schemaName, 
                wfschemaIttfDocumentUri: wfschemaIttfDocumentUri, 
                outputPackageFolder: outputPackageFolder
             };
            AsyncWizziModelDomRunner.run(wmtRequest, (err, result) => {
                if (err) {
                    console.log("[31m%s[0m", err);
                    return callback(err);
                }
                // TODO how to expose results ?
                callback(null, this.productionStep);
            }
            )
        }
        )
    }
    Runner.prototype.runWizziModelArtifact = function(modelInfo, gen, callback) {
        modelInfo.getModelInfos({
            final: false
         }, (err, modelInfos) => {
            if (err) {
                console.log("[31m%s[0m", err);
                return callback(err);
            }
            // loog '+ wizzi.production.runner.runWizziModelArtifact, modelInfos, gen', modelInfos, gen
            modelInfo.getArtifactGenerator(gen.generator, (err, generator) => {
                if (err) {
                    console.log("[31m%s[0m", err);
                    return callback(err);
                }
                // loog '+ wizzi.production.runner.runWizziModelArtifact, generator', generator
                AsyncModelLoader.loadMany(modelInfos, (err, mainSourceModels) => {
                    if (err) {
                        console.log("[31m%s[0m", err);
                        return callback(err);
                    }
                    // loog '+ wizzi.production.runner.runWizziModelArtifact, mainSourceModels', mainSourceModels
                    AsyncArtifactGenerator.generate(this.productionStep, generator, modelInfos, mainSourceModels, (err, notUsed) => {
                        if (err) {
                            console.log("[31m%s[0m", err);
                            return callback(err);
                        }
                        callback(null, this.productionStep);
                    }
                    )
                }
                )
            }
            )
        }
        )
    }
    Runner.prototype.runWizziModelToFolderArtifact = function(modelInfo, gen, callback) {
        modelInfo.getModelInfos({
            final: false
         }, (err, modelInfos) => {
            if (err) {
                console.log("[31m%s[0m", err);
                return callback(err);
            }
            var doRun = (ndx) => {
                var modelInfo = modelInfos[ndx];
                if (!modelInfo) {
                    return callback(null, this.productionStep);
                }
                modelInfo.getArtifactGenerator(gen.generator, (err, generator) => {
                    if (err) {
                        console.log("[31m%s[0m", err);
                        return callback(err);
                    }
                    AsyncModelLoader.loadMany(modelInfos, (err, mainSourceModelsOfModelCollection) => {
                        if (err) {
                            console.log("[31m%s[0m", err);
                            return callback(err);
                        }
                        var doRunSourceModels = (ndxSourceModels) => {
                            var sourceModel = mainSourceModelsOfModelCollection[ndxSourceModels];
                            if (!sourceModel) {
                                return doRun(ndx + 1);
                            }
                            var wf = this.productionStep.getWizziFactory();
                            wf.ittfModelToFolder(sourceModel, {
                                baseDestFolder: ""
                             }, (err, folderPackiFiles) => {
                                if (err) {
                                    console.log("[31m%s[0m", err);
                                    return callback(err);
                                }
                                // loog 'WizziModelToFolderArtifact folderPackiFiles', folderPackiFiles
                                for (var k in folderPackiFiles) {
                                    var genContext = new GenContext({
                                        model: null, 
                                        srcPath: k, 
                                        srcFullPath: null, 
                                        options: this.productionStep.options, 
                                        pman: modelInfo.productionManager()
                                     });
                                    genContext.write(folderPackiFiles[k].contents)
                                    this.productionStep.addGenContext(genContext);
                                }
                                return doRunSourceModels(ndxSourceModels + 1);
                            }
                            )
                        }
                        ;
                        doRunSourceModels(0)
                    }
                    )
                }
                )
            }
            ;
            doRun(0)
        }
        )
    }
    Runner.prototype.runModelCollectionArtifact = function(modelInfo, gen, callback) {
        modelInfo.getModelInfos({
            final: false
         }, (err, modelInfos) => {
            if (err) {
                console.log("[31m%s[0m", err);
                return callback(err);
            }
            var i, i_items=modelInfos, i_len=modelInfos.length, mi;
            for (i=0; i<i_len; i++) {
                mi = modelInfos[i];
                logme("runModelCollectionArtifact.modelInfo to load", mi)
            }
            modelInfo.getArtifactGenerator(gen.generator, (err, generator) => {
                if (err) {
                    console.log("[31m%s[0m", err);
                    return callback(err);
                }
                AsyncModelLoader.loadMany(modelInfos, (err, mainSourceModelsOfModelCollection) => {
                    if (err) {
                        console.log("[31m%s[0m", err);
                        return callback(err);
                    }
                    logme('runModelCollectionArtifact got mainSourceModelsOfModelCollection', mainSourceModelsOfModelCollection)
                    AsyncArtifactGenerator.generateModelCollection(this.productionStep, generator, modelInfos, mainSourceModelsOfModelCollection, (err, result) => {
                        if (err) {
                            console.log("[31m%s[0m", err);
                            return callback(err);
                        }
                        logme('runModelCollectionArtifact result', result)
                        callback(null, this.productionStep);
                    }
                    )
                }
                )
            }
            )
        }
        )
    }
    Runner.prototype.runLoadModelAndGenerateArtifact = function(ittfDocumentProduction, callback) {
        this.productionStep.gen = ittfDocumentProduction.gen;
        this.productionStep.dest = ittfDocumentProduction.dest;
        // loog 'runLoadModelAndGenerateArtifact.ittfDocumentProduction.gen', ittfDocumentProduction.gen
        // loog 'runLoadModelAndGenerateArtifact.ittfDocumentProduction.dest', ittfDocumentProduction.dest
        var pman = ittfDocumentProduction.productionManager;
        var wf = pman.wizziFactory;
        wf.loadModelAndGenerateArtifact(ittfDocumentProduction.ittfDocumentUri, {
            modelRequestContext: ittfDocumentProduction.modelRequestContext, 
            artifactRequestContext: ittfDocumentProduction.artifactRequestContext, 
            productionManager: pman
         }, ittfDocumentProduction.artifactName, (err, artifactText) => {
            if (err) {
                console.log("[31m%s[0m", err);
                return callback(err);
            }
            var genContext = new GenContext({
                model: null, 
                srcPath: ittfDocumentProduction.ittfDocumentUri, 
                srcFullPath: ittfDocumentProduction.ittfDocumentUri, 
                options: this.productionStep.options, 
                pman: ittfDocumentProduction.productionManager
             });
            genContext.write(artifactText)
            this.productionStep.addGenContext(genContext);
            // loog 'Runner.ProductionContext.runningContextValues', JSON.stringify(pman.productionContext.runningContextValues)
            return callback(null, this.productionStep);
        }
        )
    }
    Runner.prototype.runCodeWriteArtifact = function(contextInfos, gen, callback) {
        modelInfo.getArtifactGenerator(gen.generator, (err, generator) => {
            if (err) {
                console.log("[31m%s[0m", err);
                return callback(err);
            }
            AsyncModelLoader.loadMany(contextInfos, (err, mainSourceModels) => {
                if (err) {
                    console.log("[31m%s[0m", err);
                    return callback(err);
                }
                AsyncArtifactGenerator.generateCodeWrite(this.productionStep, generator, mainSourceModels, (err, notUsed) => {
                    if (err) {
                        console.log("[31m%s[0m", err);
                        return callback(err);
                    }
                    callback(null, this.productionStep);
                }
                )
            }
            )
        }
        )
    }
    // TODO execute copy without loading content in genContext
    Runner.prototype.runFinalArtifact = function(modelInfo, callback) {
        modelInfo.isDirectory((err, isDirectory) => {
            if (err) {
                console.log("[31m%s[0m", err);
                return callback(err);
            }
            if (isDirectory) {
                modelInfo.getFiles({
                    final: true
                 }, (err, files) => {
                    if (err) {
                        console.log("[31m%s[0m", err);
                        return callback(err);
                    }
                    var i, i_items=files, i_len=files.length, fileInfo;
                    for (i=0; i<i_len; i++) {
                        fileInfo = files[i];
                        var genContext = new GenContext({
                            model: null, 
                            srcPath: fileInfo.relPath, 
                            srcFullPath: fileInfo.fullPath, 
                            options: this.productionStep.options, 
                            pman: modelInfo.productionManager()
                         });
                        genContext.writeFile(fileInfo.fullPath)
                        this.productionStep.addGenContext(genContext);
                    }
                    return callback(null, this.productionStep);
                }
                )
            }
            else {
                var genContext = new GenContext({
                    model: null, 
                    srcPath: modelInfo.src(), 
                    srcFullPath: modelInfo.srcFullPath(), 
                    options: this.productionStep.options, 
                    pman: modelInfo.productionManager()
                 });
                modelInfo.getSource((err, content) => {
                    if (err) {
                        console.log("[31m%s[0m", err);
                        return callback(err);
                    }
                    genContext.write(content);
                    this.productionStep.addGenContext(genContext);
                    return callback(null, this.productionStep);
                }
                )
            }
        }
        )
    }
    Runner.prototype.runFrontMatter = function(callback) {
        if (this.productionStep.modelInfo) {
            this.productionStep.modelInfo.getModelInfos({
                final: false
             }, (err, modelInfos) => {
                if (err) {
                    console.log("[31m%s[0m", err);
                    return callback(err);
                }
                // loog 'runFrontMatter.modelInfos', modelInfos.length
                AsyncFrontMatterLoader.loadMany(modelInfos, (err, frontMatters) => {
                    if (err) {
                        console.log("[31m%s[0m", err);
                        return callback(err);
                    }
                    return callback(null, {
                            collection: this.productionStep.collection, 
                            items: frontMatters
                         });
                }
                )
            }
            )
        }
        // loog 'runFrontMatter.contextInfos', this.productionStep.contextInfos.length
        else {
            AsyncFrontMatterLoader.loadMany(this.productionStep.contextInfos, (err, frontMatters) => {
                if (err) {
                    console.log("[31m%s[0m", err);
                    return callback(err);
                }
                return callback(null, {
                        collection: this.productionStep.collection, 
                        items: frontMatters
                     });
            }
            )
        }
    }
    return Runner;
})();

/**
     params
     string code
     # the error name or number
     string method
     string message
     # optional
     { innerError
     # optional
*/
function error(code, method, message, innerError) {
    return verify.error(innerError, {
            name: ( verify.isNumber(code) ? 'Err-' + code : code ), 
            method: 'wizzi.production.runner.' + method, 
            sourcePath: __filename
         }, message || 'Error message unavailable');
}

module.exports = {
    Runner: Runner
};