/*
    artifact generator: C:\Users\stfnb\AppData\Roaming\npm\node_modules\@wizzi\cli\node_modules\@wizzi\plugin.js\lib\artifacts\js\module\gen\main.js
    package: @wizzi/plugin.js@0.8.9
    primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi\packages\wizzi\.wizzi\lib\production\step.js.ittf
    utc time: Thu, 02 Jan 2025 12:51:28 GMT
*/
// generated by wizzi.plugin.js.artifacts.js.module.gen.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };


var assert = require('assert');
var path = require('path');
var util = require('util');
var _ = require('lodash');
var verify = require('@wizzi/utils').verify;
var interpolate = require('../util/interpolate');
var interpolateFilename = require('../util/interpolateFilename');
var ModelInfo = require("./model/modelInfo").ModelInfo;

/**
     A ProductionStep instance is built from an 'artifact' element
     of a `wzjob` wizzi model.
     The 'artifact' element has been preprocessed
     by the wizzi/lib/production/wzjob module
     giving the productionStepConfig parameter.
     param
     { productionStepConfig
     name:String,
     options:Object {
     basedir:String // Uri
     dotgExtensionPrefix:Boolean
     },
     model:Object {  // ModelInfo config object
     see lib/production/wzjob.js for creation
     see lib/production/model/modelInfo.js for use
     },
     collection:String,
     isWzJob:Boolean,
     isWzSchema:Boolean,
     isWzModelToFolder:Boolean,
     transformers:Array {
     name:String
     dumpFile:String    // Uri
     },
     gen:Object {
     generator:String // generator name
     },
     dest:Object {
     fullPath:String    // Uri
     folder:String      // a basepath Uri, may be relative
     baseFolder:String  // a basepath Uri (required when folder is relative)
     path:String        // relative path
     extension:String
     }
     ittfDocuments {
     }
     }
*/

function logme() {
    if (false) {
        console.log.apply(console, arguments);
    }
}

var ProductionStep = (function () {
    function ProductionStep(productionStepConfig) {
        _classCallCheck(this, ProductionStep);
        this.name = productionStepConfig.name;
        this.options = productionStepConfig.options;
        if (verify.isObject(productionStepConfig.model)) {
            this.modelInfo = new ModelInfo(productionStepConfig.model);
            this.contextInfos = null;
        }
        else if (verify.isArray(productionStepConfig.contexts)) {
            this.contextInfos = [];
            var i, i_items=productionStepConfig.contexts, i_len=productionStepConfig.contexts.length, item;
            for (i=0; i<i_len; i++) {
                item = productionStepConfig.contexts[i];
                this.contextInfos.push(new ModelInfo(item))
            }
            this.modelInfo = null;
        }
        this.collection = productionStepConfig.collection;
        this.isWzJob = productionStepConfig.isWzJob;
        this.isWzModelType = productionStepConfig.isWzModelType;
        this.isWzModelToFolder = productionStepConfig.isWzModelToFolder;
        this.transformers = productionStepConfig.transformers;
        this.gen = productionStepConfig.gen;
        this.dest = productionStepConfig.dest;
        this.wzjob = productionStepConfig.wzjob;
        this.ittfDocumentProduction = productionStepConfig.ittfDocumentProduction;
        
        // loog 'ProductionStep.productionStepConfig.ittfDocumentProduction.fileCtx', this.ittfDocumentProduction.fileCtx
        if (this.ittfDocumentProduction) {
            this.fileCtx = this.ittfDocumentProduction.fileCtx;
        }
        this.genContexts = [];
    }
    ProductionStep.prototype.initialize = function(productionManager) {
        this.productionManager = productionManager;
        if (this.modelInfo) {
            this.modelInfo.productionManager(productionManager)
        }
        else if (this.ittfDocumentProduction) {
            this.ittfDocumentProduction.productionManager = productionManager;
        }
        else {
            var i, i_items=this.contextInfos, i_len=this.contextInfos.length, item;
            for (i=0; i<i_len; i++) {
                item = this.contextInfos[i];
                item.productionManager(productionManager)
            }
        }
        this.options = _.merge({}, productionManager.options || {}, this.options || {})
        ;
    }
    ProductionStep.prototype.addGenContext = function(genContext) {
        this.genContexts.push(genContext);
    }
    ProductionStep.prototype.isWizziModelDomArtifact = function() {
        return this.modelInfo != null && this.modelInfo.getModelCollectionInfo() == null && this.isWzModelType;
    }
    ProductionStep.prototype.isWizziFactoryJob = function() {
        return this.modelInfo != null && this.modelInfo.getModelCollectionInfo() == null && this.isWzJob;
    }
    ProductionStep.prototype.isWizziModelToFolderArtifact = function() {
        return this.modelInfo != null && this.modelInfo.getModelCollectionInfo() == null && this.isWzModelToFolder;
    }
    ProductionStep.prototype.isWizziModelArtifact = function() {
        return this.modelInfo != null && this.modelInfo.getModelCollectionInfo() == null && !!this.isWzModelToFolder == false && !!this.isWzModelType == false && !!this.isWzJob == false && verify.isObject(this.gen) && verify.isNotEmpty(this.gen.generator);
    }
    ProductionStep.prototype.isModelCollectionArtifact = function() {
        return this.modelInfo != null && verify.isObject(this.modelInfo.getModelCollectionInfo()) && verify.isObject(this.gen);
    }
    ProductionStep.prototype.isCodeWriteArtifact = function() {
        return this.modelInfo == null && verify.isObject(this.gen) && verify.isNotEmpty(this.gen.generator);
    }
    ProductionStep.prototype.isIttfDocumentProduction = function() {
        return this.modelInfo == null && verify.isObject(this.ittfDocumentProduction);
    }
    ProductionStep.prototype.isFinalArtifact = function() {
        return this.modelInfo != null && (verify.isObject(this.gen) === false || verify.isEmpty(this.gen.generator));
    }
    ProductionStep.prototype.getWizziFactory = function() {
        assert.ok(verify.isObject(this.productionManager), 'productionManager not set.')
        assert.ok(verify.isObject(this.productionManager.wizziFactory), 'wizziFactory must be set on productionManager')
        return this.productionManager.wizziFactory;
    }
    ProductionStep.prototype.getFileService = function() {
        var wizziFactory = this.getWizziFactory();
        assert.ok(verify.isObject(wizziFactory.fileService), 'fileService must be set on wizziFactory')
        return wizziFactory.fileService;
    }
    ProductionStep.prototype.getItemsToPersistToFile = function(callback) {
        var check = {};
        var items = [];
        var i, i_items=this.genContexts, i_len=this.genContexts.length, genContext;
        for (i=0; i<i_len; i++) {
            genContext = this.genContexts[i];
            var srcPath = genContext.srcPath;
            if (this.isModelCollectionArtifact()) {
                var collectionItem = genContext.model;
                assert.strictEqual(verify.isObject(collectionItem), true, 'genContext.model must contain an object.')
                var ipcontext = this.getInterpolatePathNameContext(collectionItem);
                if (ipcontext && ipcontext.__is_error) {
                    console.log("[31m%s[0m", '__is_error ', ipcontext);
                    return callback(ipcontext);
                }
                var destUri = this.getDestinationUri(srcPath);
                if (destUri && destUri.__is_error) {
                    console.log("[31m%s[0m", '__is_error ', destUri);
                    return callback(destUri);
                }
                var filePath = interpolate(destUri, ipcontext, {
                    delimiter: '{}'
                 });
                
                // loog 'filePath.before', filePath
                
                // loog 'filePath.after', filePath
                if (this.fileCtx) {
                    filePath = interpolateFilename(filePath, this.fileCtx)
                    ;
                }
                logme('ProductionStep.getItemsToPersistToFile.ipcontext', ipcontext, 'filePath', filePath);
                if (check[filePath]) {
                    return callback(this.error("Duplicated destination filePath: " + filePath, "getItemsToPersistToFile"));
                }
                check[filePath] = true;
                var persisteable = {
                    productionStep: this, 
                    genContext: genContext, 
                    filePath: filePath
                 };
                items.push(persisteable);
            }
            // loog 'getItemsToPersistToFile, srcPath, filePath', srcPath, filePath
            else {
                var filePath = this.getDestinationUri(srcPath);
                if (filePath && filePath.__is_error) {
                    console.log("[31m%s[0m", '__is_error ', filePath);
                    return callback(filePath);
                }
                
                // loog 'filePath.before', filePath
                
                // loog 'filePath.after', filePath
                if (this.fileCtx) {
                    filePath = interpolateFilename(filePath, this.fileCtx)
                    ;
                }
                var persisteable = {
                    productionStep: this, 
                    genContext: genContext, 
                    filePath: filePath
                 };
                items.push(persisteable);
            }
        }
        callback(null, items);
    }
    ProductionStep.prototype.getInterpolatePathNameContext = function(collectionItem) {
        if (this.isModelCollectionArtifact()) {
            var result = {};
            var info = this.modelInfo.getModelCollectionInfo();
            var i, i_items=info.pathTemplateValues, i_len=info.pathTemplateValues.length, templValue;
            for (i=0; i<i_len; i++) {
                templValue = info.pathTemplateValues[i];
                if (templValue.function) {
                    result[templValue.token] = collectionItem[templValue.function]();
                    if (verify.isEmpty(result[templValue.token])) {
                        return this.error('the path template value function must return a not empty string for token: "' + templValue.token + '"', 'getInterpolatePathNameContext');
                    }
                }
                else if (templValue.attribute) {
                    result[templValue.token] = collectionItem[templValue.attribute];
                    logme('result[templValue.token]', result[templValue.token], verify.isEmpty(result[templValue.token]))
                    if (verify.isEmpty(result[templValue.token])) {
                        return this.error('the path template value attribute "' + templValue.attribute + '" must return a not empty string for token: "' + templValue.token + '"', 'getInterpolatePathNameContext');
                    }
                }
                else {
                    return this.error('path template value must contain an attribute or a function value for token: "' + templValue.token + '"', 'getInterpolatePathNameContext');
                }
            }
            return result;
        }
        else {
            return this.error("Method called on an artifact that is not a wizzi collection artifact.", 'getInterpolatePathNameContext');
        }
    }
    ProductionStep.prototype.getDestinationUri = function(srcPath) {
        var dest = this.dest;
        // loog 'getDestinationUri, srcPath, dest', srcPath, dest
        var msg = [
            'ProductionStep.getDestinationUri', 
            'config.dest'
        ];
        if (verify.isNotEmpty(dest.fullPath)) {
            return dest.fullPath;
        }
        if (verify.isEmpty(dest.folder)) {
            return this.error('A not empty dest.folder is required', 'getDestinationUri');
        }
        var destpath;
        if (dest.path && verify.isAbsolutePath(dest.path)) {
            destpath = path.join(dest.path, srcPath);
        }
        else {
            if (dest.path) {
                destpath = path.join(dest.folder, dest.path);
            }
            else {
                if (verify.isEmpty(srcPath)) {
                    return this.error('A not empty srcPath is required', 'getDestinationUri');
                }
                destpath = path.join(dest.folder, srcPath);
                if (this.isFinalArtifact() == false && this.isWizziModelToFolderArtifact() == false) {
                    if (dest.extension == '@@null') {
                        destpath = verify.stripIttfExtension(destpath);
                        destpath = verify.replaceExtension(destpath, '');
                        if (verify.endsWith(destpath, '.')) {
                            destpath = destpath.substr(0, destpath.length - 1);
                        }
                    }
                    else {
                        var ext = (dest.extension || 'js');
                        ext = verify.startsWith(ext, '.') ? ext.substr(1) : ext;
                        if (this.options.dotgExtensionPrefix) {
                            ext = 'g.' + ext;
                        }
                        destpath = verify.stripIttfExtension(destpath);
                        destpath = verify.replaceExtension(destpath, ext);
                    }
                }
            }
        }
        if (this.isFinalArtifact() === true) {
            destpath = verify.replaceAll(destpath, '__copy', '');
        }
        if (verify.isAbsolutePath(destpath)) {
            return destpath;
        }
        if (verify.isEmpty(dest.baseFolder)) {
            return this.error('When dest.folder is a relative path, a not empty dest.baseFolder value is required. Received destpath : ' + destpath, 'getDestinationUri');
        }
        return path.join(dest.baseFolder, destpath);
    }
    ProductionStep.prototype.error = function(message, method) {
        var err = {
            __is_error: true, 
            message: message, 
            source: "wizzi/lib/production/step.js/" + method, 
            modelInfo: this.modelInfo
         };
        logme(err);
        return err;
    }
    ProductionStep.prototype.dump = function() {
        throw new Error('Not implemented');
    }
    ProductionStep.prototype._relPath = function() {
        if (this.modelInfo) {
            return this.options.basedir ? this.modelInfo.srcFullPath().substr(this.options.basedir.length + 1)
                 : this.modelInfo.srcFullPath();
        }
        else {
            return 'null';
        }
    }
    ProductionStep.prototype.toString = function() {
        return [
                '\n', 
                'ProductionStep ', 
                'name: ' + this.name, 
                'model.src: ' + this._relPath(), 
                ', gen.generator:', 
                this.gen ? this.gen.generator : 'none', 
                '\n'
            ].join(' ');
    }
    ProductionStep.prototype.terminate = function() {
        if (this.modelInfo) {
            this.modelInfo.terminate();
        }
        if (this.contextInfos) {
            var i, i_items=this.contextInfos, i_len=this.contextInfos.length, item;
            for (i=0; i<i_len; i++) {
                item = this.contextInfos[i];
                item.terminate();
            }
        }
        if (this.genContexts) {
            var i, i_items=this.genContexts, i_len=this.genContexts.length, item;
            for (i=0; i<i_len; i++) {
                item = this.genContexts[i];
                item.terminate();
            }
        }
    }
    ProductionStep.isProductionConfig = function(test) {
        if (!test) {
            return false;
        }
        if (verify.isObject(test.ittfDocumentProduction)) {
            return true;
        }
        if (!verify.isObject(test.options)) {
            return false;
        }
        if (!verify.isObject(test.model) && !verify.isObject(test.contexts)) {
            return false;
        }
        if (!verify.isObject(test.dest)) {
            return false;
        }
        if (!verify.isObject(test.gen)) {
            return false;
        }
        return true;
    }
    ProductionStep.isProductionInstance = function(test) {
        throw new Error('Not implemented');
    }
    ProductionStep.prototype.getState = function() {
        var retval = {
            name: this.name, 
            model_src: this._relPath(), 
            dest: this.dest
         };
        retval.hasModelInfo = this.modelInfo != null;
        retval.hasCollectionInfo = this.modelInfo != null && this.modelInfo.getModelCollectionInfo() != null;
        retval.isWzModelToFolder = this.isWzModelToFolder;
        retval.isWzModelType = this.isWzModelType;
        retval.isWzJob = this.isWzJob;
        retval.gen = this.gen;
        retval.ittfDocumentProduction = this.ittfDocumentProduction;
        return retval;
    }
    return ProductionStep;
})();


module.exports = {
    ProductionStep: ProductionStep
};