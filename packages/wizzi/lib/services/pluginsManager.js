/*
    artifact generator: C:\Users\stfnb\AppData\Roaming\npm\node_modules\@wizzi\cli\node_modules\@wizzi\plugin.js\lib\artifacts\js\module\gen\main.js
    package: @wizzi/plugin.js@0.8.9
    primary source IttfDocument: C:\My\wizzi\stfnbssl\wizzi\packages\wizzi\.wizzi\lib\services\pluginsManager.js.ittf
    utc time: Tue, 21 Jan 2025 14:15:35 GMT
*/
// generated by wizzi.plugin.js.artifacts.js.module.gen.main
function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var verify = require('@wizzi/utils').verify;
var path = require('path');
var fs = require('fs');
var _ = require('lodash');
var log = require('../util/log')(module);
var verify = require('@wizzi/utils').verify;
var file = require('@wizzi/utils').file;
var fail = require('@wizzi/utils').fail;
var errors = require('../errors');
var existsSync = fs.existsSync || path.existsSync;
var realpathSync = fs.realpathSync;
var exists = fs.exists || path.exists;
var realpath = fs.realpath;
// TODO
// Implement available wizzi factories
var availableFactories = [];
var PluginsManager = (function () {
    function PluginsManager() {
        _classCallCheck(this, PluginsManager);
        this.__type = 'PluginsManager';
        this.__version = '0.8.46';
        this.packagePathCache = {};
        this.factoryPlugins = [];
        this.providedSchemas = [];
        this.providedSchemasExt = [];
        this.providedModelTransformers = [];
        this.providedArtifactGenerators = [];
        this.providedWizzifiers = [];
        this.providedCheatsheetFolders = [];
        this.extensionSchemaMap = {};
        this.schemaDefaulArtifactMap = {};
        this.schemaArtifactsMap = {};
        this.schemaRootTagMap = {};
        this.artifactContentTypeMap = {};
    }
    /**
         { options
         string pluginsBaseFolder
         default process.cwd()
         [ items
         required
         string pluginName
         }
    */
    PluginsManager.prototype.initialize = function(options, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'initialize', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(options) === false) {
            return callback(error(
                'InvalidArgument', 'initialize', { parameter: 'options', message: 'The options parameter must be an object. Received: ' + options }
            ));
        }
        if (verify.isNullOrUndefined(options.items) === false) {
            if (verify.isArray(options.items) === false) {
                return callback(error(
                    'InvalidArgument', 'initialize', { parameter: 'options.items', message: 'The options.items parameter must be an array. Received: ' + options.items }
                ));
            }
        }
        // loog 'wizzi.pluginsManager.initialize.options', options
        var itemsOptions = options.items;
        if (typeof(itemsOptions) === 'undefined' || itemsOptions == null) {
            options.items = [];
        }
        if (options.verbose) {
            var date = new Date();
            var timeNow = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
            console.log("[33m%s[0m", timeNow, "Starting ", this.__type, 'version', this.__version);
        }
        var that = this;
        this.loadPlugins(options, function(err, plugins) {
            if (err) {
                return callback(err);
            }
            function register(i) {
                if (i >= plugins.length) {
                    return callback(null, that);
                }
                var plugin = plugins[i];
                that.registerFactoryPlugin(plugin, options, function(err, notUsed) {
                    if (err) {
                        return callback(err);
                    }
                    return register(++i);
                })
            }
            register(0);
        })
    }
    PluginsManager.prototype.loadPlugins = function(options, callback) {
        
        var itemsOptions = options.items;
        // loog 'pluginsBaseFolder before', options.pluginsBaseFolder
        // loog '__dirname', __dirname
        var pluginsBaseFolderNodeModule = path.resolve(__dirname, '..', '..', '..');
        var pluginsBaseFolder = options.pluginsBaseFolder || path.resolve(__dirname, '..', '..', '..');
        var packagePathCache = this.packagePathCache;
        
        function resolveNext(i) {
            
            // loog 'itemsOptions', itemsOptions
            if (i >= itemsOptions.length) {
                return callback(null, itemsOptions);
            }
            var plugin = itemsOptions[i];
            if (typeof (plugin) === "string") {
                plugin = itemsOptions[i] = {packagePath: plugin};
            }
            if (plugin.hasOwnProperty("packagePath") && !(plugin.hasOwnProperty("setup"))) {
                const pluginsBaseFolderItem = (plugin.packagePath[0] === "." || plugin.packagePath[0] === "/") ? pluginsBaseFolder : pluginsBaseFolderNodeModule;
                return resolveModule(pluginsBaseFolderItem, plugin.packagePath, function(err, moduleObject) {
                        if (err) {
                            return callback(err);
                        }
                        Object.keys(moduleObject).forEach(function(key) {
                            
                            // loog 'plugin key', key
                            if (!plugin.hasOwnProperty(key)) {
                                plugin[key] = moduleObject[key];
                            }
                        })
                        plugin.packageName = plugin.packagePath;
                        plugin.packagePath = moduleObject.packagePath;
                        if (options.verbose) {
                            var date = new Date();
                            var timeNow = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();
                            var spaces = new Array(timeNow.length+1).join(' ');
                            console.log("[33m%s[0m", timeNow, "Loaded plugin", plugin.packageName, 'version', plugin.version);
                            console.log("[33m%s[0m", spaces, 'schemas: ', plugin.provides.schemas.join(', '));
                            console.log("[33m%s[0m", spaces, 'artifact generators: ', plugin.provides.artifactGenerators.join(', '));
                            if (plugin.provides.modelTransformers.length > 0) {
                                console.log("[33m%s[0m", spaces, 'model transformers: ', plugin.provides.modelTransformers.join(', '));
                            }
                        }
                        return resolveNext(++i);
                    });
            }
            else {
                return resolveNext(++i);
            }
        }
        resolveNext(0);
        function resolveModule(pluginsBaseFolder, modulePath, callback) {
            
            resolvePackage(pluginsBaseFolder, (modulePath + "/package.json"), function(err, packagePath) {
                var metadata = {};
                var packageMetadata;
                if (!err) {
                    try {
                        packageMetadata = (packagePath && require(packagePath).plugin) || {};
                    } 
                    catch (ex) {
                        return callback(error('PackageError', 'resolveModule', 'Error loading plugin package.json ' + packagePath + ', message: ' + ex.message));
                    } 
                }
                (function(next) {
                    if (err) {
                        var mp = verify.endsWith(modulePath, '.js') ? modulePath : modulePath + '.js';
                        resolvePackage(pluginsBaseFolder, mp, next);
                    }
                    else if (packagePath) {
                        next(null, path.dirname(packagePath))
                    }
                    else {
                        resolvePackage(pluginsBaseFolder, modulePath, next);
                    }
                })(function(err, modulePath) {
                    if (err) {
                        return callback(err);
                    }
                    var moduleObject;
                    try {
                        // load the module now
                        moduleObject = require(modulePath);
                        // loog 'wizzi.services.pluginManager.resolveModule: modulePath, moduleObject', modulePath, moduleObject
                    } 
                    catch (ex) {
                        return callback(error('ModuleError', 'resolveModule', 'Error loading plugin module ' + modulePath + ', message: ' + ex.message + '\n' + ex.stack));
                    } 
                    moduleObject.provides = (packageMetadata && packageMetadata.provides) || moduleObject.provides || [];
                    moduleObject.consumes = (packageMetadata && packageMetadata.consumes) || moduleObject.consumes || [];
                    moduleObject.packagePath = modulePath;
                    callback(null, moduleObject);
                })
                ;
            })
        }
        function resolvePackage(pluginsBaseFolder, packagePath, callback) {
            
            var originalBase = pluginsBaseFolder;
            
            if (!packagePathCache.hasOwnProperty(pluginsBaseFolder)) {
                packagePathCache[pluginsBaseFolder] = {};
            }
            var cache = packagePathCache[pluginsBaseFolder];
            if (cache.hasOwnProperty(packagePath)) {
                return callback(null, cache[packagePath]);
            }
            
            // local folder plugin module
            if (packagePath[0] === "." || packagePath[0] === "/") {
                var newPath = path.resolve(pluginsBaseFolder, packagePath);
                exists(newPath, function(exists) {
                    if (exists) {
                        realpath(newPath, function(err, newPath) {
                            if (err) {
                                return callback(err);
                            }
                            cache[packagePath] = newPath;
                            return callback(null, newPath);
                        })
                    }
                    else {
                        return callback(error('ENOENT', 'resolvePackage', "Can't find '" + newPath + "' ('" + packagePath + "' relative to '" + originalBase + "')"));
                    }
                })
            }
            // npm (node_modules folder) plugin module
            else {
                tryNext(pluginsBaseFolder);
            }
            function tryNext(base) {
                if (base == "/") {
                    return callback(error('ENOENT', 'resolvePackage', "Can't find '" + packagePath + "' relative to '" + originalBase + "'"));
                }
                var newPath = path.resolve(base, "node_modules", packagePath);
                exists(newPath, function(exists) {
                    if (exists) {
                        realpath(newPath, function(err, newPath) {
                            if (err) {
                                return callback(err);
                            }
                            cache[packagePath] = newPath;
                            return callback(null, newPath);
                        })
                    }
                    else {
                        var nextBase = path.resolve(base, '..');
                        if (nextBase === base) {
                            tryNext("/");
                        }
                        else {
                            tryNext(nextBase);
                        }
                    }
                })
            }
        }
    }
    /**
         Register a factoryPlugin to this plugins manager
    */
    PluginsManager.prototype.registerFactoryPlugin = function(pluginModule, options, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'registerFactoryPlugin', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(pluginModule) === false) {
            return callback(error(
                'InvalidArgument', 'registerFactoryPlugin', { parameter: 'pluginModule', message: 'The pluginModule parameter must be an object. Received: ' + pluginModule }
            ));
        }
        if (verify.isFunction(pluginModule.createFactoryPlugin) === false) {
            return callback(error(
                'InvalidArgument', 'registerFactoryPlugin', { parameter: 'pluginModule.createFactoryPlugin', message: 'The pluginModule.createFactoryPlugin parameter must be a function. Received: ' + pluginModule.createFactoryPlugin }
            ));
        }
        if (verify.isObject(options) === false) {
            return callback(error(
                'InvalidArgument', 'registerFactoryPlugin', { parameter: 'options', message: 'The options parameter must be an object. Received: ' + options }
            ));
        }
        var that = this;
        pluginModule.createFactoryPlugin(this.createWizziForPlugin(), {}, function(err, factoryPlugin) {
            if (err) {
                return callback(err);
            }
            var vld = that.validateFactoryPlugin(factoryPlugin);
            if (vld.__is_error) {
                return callback(vld);
            }
            factoryPlugin.packageName = pluginModule.packageName;
            factoryPlugin.packagePath = pluginModule.packagePath;
            that.factoryPlugins.push(factoryPlugin);
            var providesAdded = that.addPluginProvides(factoryPlugin);
            if (providesAdded && providesAdded.__is_error) {
                console.log("[31m%s[0m", '__is_error ', providesAdded);
                return callback(providesAdded);
            }
            return callback(null);
        })
    }
    PluginsManager.prototype.createWizziForPlugin = function() {
        return {
                file: file
             };
    }
    PluginsManager.prototype.validateFactoryPlugin = function(factoryPlugin) {
        if (verify.isObject(factoryPlugin) === false) {
            return error(
                'InvalidArgument', 'validateFactoryPlugin', { parameter: 'factoryPlugin', message: 'The factoryPlugin parameter must be an object. Received: ' + factoryPlugin }
            );
        }
        for (var k in factoryPlugin) {
            // loog 'wizzi.pluginsManager.validatefactoryPlugin.key', k
        }
        
        var methodNames = [
            'getName', 
            'getFilename', 
            'getProvides', 
            'getModelFactory', 
            'getModelTransformer', 
            'getArtifactGenerator', 
            'getSchemaDefinition'
        ];
        var i, i_items=methodNames, i_len=methodNames.length, methodName;
        for (i=0; i<i_len; i++) {
            methodName = methodNames[i];
            if (verify.isFunction(factoryPlugin[methodName]) == false) {
                return error('InvalidFactoryPlugin', 'validateFactoryPlugin', 'Missing method: ' + methodName);
            }
            try {
                factoryPlugin[methodName]('dummy');
            } 
            catch (ex) {
                return error('InvalidFactoryPlugin', 'validateFactoryPlugin', 'Error executing method: ' + methodName + ', message: ' + ex.message);
            } 
        }
        var providesProperties = [
            'schemas', 
            'modelTransformers', 
            'artifactGenerators'
        ];
        var provides = factoryPlugin.getProvides();
        var i, i_items=providesProperties, i_len=providesProperties.length, propName;
        for (i=0; i<i_len; i++) {
            propName = providesProperties[i];
            if (verify.isArray(provides[propName]) == false) {
                return error('InvalidFactoryPlugin', 'validateFactoryPlugin', 'Missing property: ' + propName + ' in provides object');
            }
        }
        // loog 'validateFactoryPlugin', factoryPlugin.getName(), true
        return {
                __is_error: false
             };
    }
    PluginsManager.prototype.addPluginProvides = function(factoryPlugin) {
        if (verify.isObject(factoryPlugin) === false) {
            return error(
                'InvalidArgument', 'addPluginProvides', { parameter: 'factoryPlugin', message: 'The factoryPlugin parameter must be an object. Received: ' + factoryPlugin }
            );
        }
        if (verify.isObject(factoryPlugin.provides) === false) {
            return error(
                'InvalidArgument', 'addPluginProvides', { parameter: 'factoryPlugin.provides', message: 'The factoryPlugin.provides parameter must be an object. Received: ' + factoryPlugin.provides }
            );
        }
        if (verify.isArray(factoryPlugin.provides.schemas) === false) {
            return error(
                'InvalidArgument', 'addPluginProvides', { parameter: 'factoryPlugin.provides.schemas', message: 'The factoryPlugin.provides.schemas parameter must be an array. Received: ' + factoryPlugin.provides.schemas }
            );
        }
        if (verify.isArray(factoryPlugin.provides.modelTransformers) === false) {
            return error(
                'InvalidArgument', 'addPluginProvides', { parameter: 'factoryPlugin.provides.modelTransformers', message: 'The factoryPlugin.provides.modelTransformers parameter must be an array. Received: ' + factoryPlugin.provides.modelTransformers }
            );
        }
        if (verify.isArray(factoryPlugin.provides.artifactGenerators) === false) {
            return error(
                'InvalidArgument', 'addPluginProvides', { parameter: 'factoryPlugin.provides.artifactGenerators', message: 'The factoryPlugin.provides.artifactGenerators parameter must be an array. Received: ' + factoryPlugin.provides.artifactGenerators }
            );
        }
        var found;
        var i, i_items=factoryPlugin.provides.schemas, i_len=factoryPlugin.provides.schemas.length, item;
        for (i=0; i<i_len; i++) {
            item = factoryPlugin.provides.schemas[i];
            found = _.find(this.providedSchemas, {
                name: item
             })
            ;
            if (found) {
                return error('DuplicatedPluginResource', 'addPluginProvides', 'Schema ' + item + ' already provided');
            }
            else {
                this.providedSchemas.push({
                    name: item
                 })
            }
        }
        
        if (factoryPlugin.provides.schemasExt) {
            var i, i_items=factoryPlugin.provides.schemasExt, i_len=factoryPlugin.provides.schemasExt.length, schema;
            for (i=0; i<i_len; i++) {
                schema = factoryPlugin.provides.schemasExt[i];
                found = _.find(this.providedSchemasExt, {
                    name: schema.name
                 })
                ;
                if (found) {
                    return error('DuplicatedPluginResource', 'addPluginProvides', 'SchemaExt ' + schema.name + ' already provided');
                }
                found = _.find(this.providedSchemas, {
                    name: schema.name
                 })
                ;
                if (!found) {
                    return error('MissingPluginResourceReference', 'addPluginProvides', 'SchemaExt ' + schema.name + ' not found in providedSchemas');
                }
                else {
                    this.providedSchemasExt.push(schema)
                    const schemaArtifacts = [];
                    var j, j_items=schema.artifactsGenerators, j_len=schema.artifactsGenerators.length, art;
                    for (j=0; j<j_len; j++) {
                        art = schema.artifactsGenerators[j];
                        schemaArtifacts.push({
                            name: schema.name + '/' + art.name, 
                            outmime: art.outmime, 
                            isDefault: art.isDefault, 
                            contentType: art.contentType
                         })
                    }
                    this.schemaArtifactsMap[schema.name] = schemaArtifacts;
                    this.schemaDefaulArtifactMap[schema.name] = schema.name + '/' + schema.defaultArtifact;
                    this.schemaRootTagMap[schema.name] = schema.rootTag || schema.name;
                    this.artifactContentTypeMap[schema.name + '/' + art.name] = art.contentType;
                    var j, j_items=schema.fileExtensions, j_len=schema.fileExtensions.length, ext;
                    for (j=0; j<j_len; j++) {
                        ext = schema.fileExtensions[j];
                        if (this.extensionSchemaMap[ext]) {
                            return error('DuplicatedPluginReference', 'addPluginProvides', 'Extensions ' + ext + ' for schema ' + schema.name + ' was already registered for schema ' + this.extensionSchemaMap[ext]);
                        }
                        else {
                            this.extensionSchemaMap[ext] = schema.name;
                        }
                    }
                }
            }
        }
        
        var i, i_items=factoryPlugin.provides.modelTransformers, i_len=factoryPlugin.provides.modelTransformers.length, item;
        for (i=0; i<i_len; i++) {
            item = factoryPlugin.provides.modelTransformers[i];
            found = _.find(this.providedModelTransformers, {
                name: item
             })
            ;
            if (found) {
                return error('DuplicatedPluginResource', 'addPluginProvides', 'Model transformer ' + item + ' already provided');
            }
            else {
                this.providedModelTransformers.push({
                    name: item
                 })
            }
        }
        
        var i, i_items=factoryPlugin.provides.artifactGenerators, i_len=factoryPlugin.provides.artifactGenerators.length, item;
        for (i=0; i<i_len; i++) {
            item = factoryPlugin.provides.artifactGenerators[i];
            found = _.find(this.providedArtifactGenerators, {
                name: item
             })
            ;
            if (found) {
                return error('DuplicatedPluginResource', 'addPluginProvides', 'Artifact generator ' + item + ' already provided');
            }
            else {
                this.providedArtifactGenerators.push({
                    name: item
                 })
            }
        }
        
        // wizzifiers are implemented in plugins from version 0.8
        if (factoryPlugin.provides.wizzifiers) {
            var i, i_items=factoryPlugin.provides.wizzifiers, i_len=factoryPlugin.provides.wizzifiers.length, item;
            for (i=0; i<i_len; i++) {
                item = factoryPlugin.provides.wizzifiers[i];
                found = _.find(this.providedWizzifiers, {
                    name: item
                 })
                ;
                if (found) {
                    return error('DuplicatedPluginResource', 'addPluginProvides', 'Wizzifier ' + item + ' already provided');
                }
                else {
                    this.providedWizzifiers.push({
                        name: item
                     })
                }
            }
        }
        
        // cheatsheet folders are implemented in plugins from version 0.9
        if (factoryPlugin.provides.cheatsheetFolders) {
            var i, i_items=factoryPlugin.provides.cheatsheetFolders, i_len=factoryPlugin.provides.cheatsheetFolders.length, item;
            for (i=0; i<i_len; i++) {
                item = factoryPlugin.provides.cheatsheetFolders[i];
                found = _.find(this.providedCheatsheetFolders, {
                    name: item
                 })
                ;
                if (found) {
                    return error('DuplicatedPluginResource', 'addPluginProvides', 'Cheatsheet folder ' + item + ' already provided');
                }
                else {
                    this.providedCheatsheetFolders.push({
                        name: item
                     })
                }
            }
        }
    }
    PluginsManager.prototype.availableSchemas = function() {
        var ret = [];
        var i, i_items=this.providedSchemas, i_len=this.providedSchemas.length, item;
        for (i=0; i<i_len; i++) {
            item = this.providedSchemas[i];
            ret.push(item.name);
        }
        return ret;
    }
    PluginsManager.prototype.availableModelTransformers = function() {
        var ret = [];
        var i, i_items=this.providedModelTransformers, i_len=this.providedModelTransformers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.providedModelTransformers[i];
            ret.push(item.name);
        }
        return ret;
    }
    PluginsManager.prototype.availableArtifactGenerators = function() {
        var ret = [];
        var i, i_items=this.providedArtifactGenerators, i_len=this.providedArtifactGenerators.length, item;
        for (i=0; i<i_len; i++) {
            item = this.providedArtifactGenerators[i];
            ret.push(item.name);
        }
        return ret;
    }
    PluginsManager.prototype.availableWizzifiers = function() {
        var ret = [];
        var i, i_items=this.providedWizzifiers, i_len=this.providedWizzifiers.length, item;
        for (i=0; i<i_len; i++) {
            item = this.providedWizzifiers[i];
            ret.push(item.name);
        }
        return ret;
    }
    PluginsManager.prototype.availableCheatsheetFolders = function() {
        var ret = [];
        var i, i_items=this.providedCheatsheetFolders, i_len=this.providedCheatsheetFolders.length, item;
        for (i=0; i<i_len; i++) {
            item = this.providedCheatsheetFolders[i];
            ret.push(item.name);
        }
        return ret;
    }
    /**
         Retrieve a model factory searching the factoryPlugins
         registered to this repository
         returns
         | api-ref wizzi-plugin.modelFactory
         | wzError NotFound
    */
    PluginsManager.prototype.getModelFactory = function(schemaName, textOnlyMockBaseDir) {
        if (verify.isNotEmpty(schemaName) === false) {
            return error(
                'InvalidArgument', 'getModelFactory', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            );
        }
        // loog 'wizzi.services.PluginsManager.getModelFactory: schemaName, textOnlyMockBaseDir ' + schemaName, textOnlyMockBaseDir
        var found = null,
            foundInPlugin = null,
            pluginVersion = null,
            result = null;
        // all factoryPlugins are searched, last matching encountered wins.
        var i, i_items=this.factoryPlugins, i_len=this.factoryPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.factoryPlugins[i];
            // loog 'wizzi.pluginsManager.getModelFactory.searching model loader', schemaName, ' in plugin ', item.getName()
            found = item.getModelFactory(schemaName, textOnlyMockBaseDir)
            ;
            if (found && found.__is_error) {
                return found;
            }
            // loog 'found', found, found && verify.isFunction(found.createLoadModel)
            if (found && verify.isFunction(found.createLoadModel)) {
                result = found;
                foundInPlugin = item.getFilename();
                if (verify.isFunction(item.getVersion)) {
                    pluginVersion = item.getVersion();
                }
            }
        }
        if (!result) {
            log.error('getModelFactory. Cannot find model loader: ' + schemaName + '\n' + 'availables schemas: ' + this.availableSchemas().join(', '));
            return error('NotFound', 'getModelFactory', 'Cannot find model loader: ' + schemaName + '\navailables schemas: ' + this.availableSchemas().join(', '));
        }
        else {
            log.success('getModelFactory. Found model loader: ' + schemaName + ' in plugin: ' + foundInPlugin + ', version:' + (pluginVersion || 'unknown'))
        }
        return result;
    }
    /**
         Retrieve a model transformer searching the factoryPlugins
         registered to this plugins manager
         params
         string transformerName
         returns
         | api-ref wizzi-plugin.modelTransformer
         | wzError NotFound
    */
    PluginsManager.prototype.getModelTransformer = function(transformerName) {
        if (verify.isNotEmpty(transformerName) === false) {
            return error(
                'InvalidArgument', 'getModelTransformer', { parameter: 'transformerName', message: 'The transformerName parameter must be a string. Received: ' + transformerName }
            );
        }
        // loog 'wizzi.pluginsManager.getModelTransformer.transformerName: ' + transformerName
        var found = null,
            foundInPlugin = null,
            pluginVersion = null,
            result = null;
        // all factoryPlugins are searched, last matching encountered wins.
        var i, i_items=this.factoryPlugins, i_len=this.factoryPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.factoryPlugins[i];
            // loog 'searching transformer ', transformerName, ' in plugin', item.getName()
            found = item.getModelTransformer(transformerName);
            ;
            if (found && found.__is_error) {
                return found;
            }
            // loog 'found', found, found && verify.isFunction(found.trans)
            if (found && verify.isFunction(found.trans)) {
                result = found;
                foundInPlugin = item.getFilename();
                if (verify.isFunction(item.getVersion)) {
                    pluginVersion = item.getVersion();
                }
            }
        }
        if (!result) {
            var msg = 'getModelTransformer. Cannot find model transformer: ' + transformerName + '\n' + 'availables transformers: ' + this.availableModelTransformers().join(', ');
            log.error(msg)
            return error('NotFound', 'getModelTransformer', msg);
        }
        else {
            log.success('getModelTransformer. Found transformer: ' + transformerName + ' in plugin: ' + foundInPlugin + ', version:' + (pluginVersion || 'unknown'))
        }
        return result;
    }
    /**
         retrieve an artifact generator searching the factoryPlugins
         registered to this plugins manager
         params
         string artifactName
         returns
         | api-ref wizzi-plugin.modelTransformer
         | wzError NotFound
    */
    PluginsManager.prototype.getArtifactGenerator = function(artifactName) {
        if (verify.isNotEmpty(artifactName) === false) {
            return error(
                'InvalidArgument', 'getArtifactGenerator', { parameter: 'artifactName', message: 'The artifactName parameter must be a string. Received: ' + artifactName }
            );
        }
        // loog 'PluginsManager.getArtifactGenerator.artifactName: ' + artifactName
        var found = null,
            foundInPlugin = null,
            pluginVersion,
            result = null;
        // all factoryPlugins are searched, last matching encountered wins.
        var i, i_items=this.factoryPlugins, i_len=this.factoryPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.factoryPlugins[i];
            // loog 'searching artifact ', artifactName, ' in module', item.getName()
            found = item.getArtifactGenerator(artifactName);
            ;
            if (found && found.__is_error) {
                return found;
            }
            // loog 'found', found, found && verify.isFunction(found.gen)
            if (found && verify.isFunction(found.gen)) {
                result = found;
                foundInPlugin = item.getFilename();
                if (verify.isFunction(item.getVersion)) {
                    pluginVersion = item.getVersion();
                }
            }
        }
        if (!result) {
            var msg = 'getArtifactGenerator. Cannot find artifact generator: ' + artifactName + '\n' + 'availables generators: ' + this.availableArtifactGenerators().join(', ');
            log.error(msg)
            return error('NotFound', 'getArtifactGenerator', msg);
        }
        else {
            log.success('getArtifactGenerator. Found artifact generator: ' + artifactName + ' in plugin: ' + foundInPlugin + ', version:' + (pluginVersion || 'unknown'))
        }
        return result;
    }
    /**
         Check if a wizzi schema has a wizzifier
         params
         string schemaName
         returns
         true|false
    */
    PluginsManager.prototype.canWizzifySchema = function(schemaName) {
        if (verify.isNotEmpty(schemaName) === false) {
            return error(
                'InvalidArgument', 'canWizzifySchema', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            );
        }
        return this.availableWizzifiers().indexOf(schemaName) > -1;
    }
    /**
         Check if a file estension has a wizzifier
         params
         string fileExtension
         returns
         true|false
    */
    PluginsManager.prototype.canWizzify = function(fileExtension) {
        if (verify.isNotEmpty(fileExtension) === false) {
            return error(
                'InvalidArgument', 'canWizzify', { parameter: 'fileExtension', message: 'The fileExtension parameter must be a string. Received: ' + fileExtension }
            );
        }
        var schemaName = this.mapExtensionToSchema(fileExtension);
        if (verify.isNotEmpty(schemaName)) {
            return this.canWizzifySchema(schemaName);
        }
        else {
            return false;
        }
    }
    /**
         Check if a file extension has a wizzifier and is a binary file
         returns
         true|false
    */
    PluginsManager.prototype.wizzifierIsForBinaryFile = function(extension) {
        if (verify.isNotEmpty(extension) === false) {
            return error(
                'InvalidArgument', 'wizzifierIsForBinaryFile', { parameter: 'extension', message: 'The extension parameter must be a string. Received: ' + extension }
            );
        }
        if (this.canWizzify(extension)) {
            var wizzifier = this.getWizzifier(extension);
            return wizzifier.isForBinaryFile;
        }
        else {
            return false;
        }
    }
    /**
         retrieve a wizzifier searching the factoryPlugins
         registered to this plugins manager
         params
         string fileExtension
         returns
         | api-ref wizzi-plugin.wizzifier
         | wzError NotFound
    */
    PluginsManager.prototype.getWizzifier = function(fileExtension) {
        if (verify.isNotEmpty(fileExtension) === false) {
            return error(
                'InvalidArgument', 'getWizzifier', { parameter: 'fileExtension', message: 'The fileExtension parameter must be a string. Received: ' + fileExtension }
            );
        }
        // loog 'PluginsManager.getWizzifier.fileExtension: ' + fileExtension
        
        var wizzifierName = this.mapExtensionToSchema(fileExtension);
        
        var found = null,
            foundInPlugin = null,
            pluginVersion,
            result = null;
        // all factoryPlugins are searched, last matching encountered wins.
        var i, i_items=this.factoryPlugins, i_len=this.factoryPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.factoryPlugins[i];
            // loog 'searching wizzifier ', wizzifierName, ' in module', item.getName()
            if (item.getWizzifier) {
                found = item.getWizzifier(wizzifierName);
                ;
                if (found && found.__is_error) {
                    return found;
                }
            }
            else {
                found = false;
            }
            // loog 'found', found, found && verify.isFunction(found.getWizziIttf)
            if (found && verify.isFunction(found.getWizziIttf)) {
                result = found;
                foundInPlugin = item.getFilename();
                if (verify.isFunction(item.getVersion)) {
                    pluginVersion = item.getVersion();
                }
            }
        }
        if (!result) {
            var msg = 'getWizzifier. Cannot find wizzifier: ' + wizzifierName + '\n' + 'availables wizzifiers: ' + this.availableWizzifiers().join(', ');
            log.error(msg)
            return error('NotFound', 'getWizzifier', msg);
        }
        else {
            log.success('getWizzifier. Found wizzifier: ' + wizzifierName + ' in plugin: ' + foundInPlugin + ', version:' + (pluginVersion || 'unknown'))
        }
        return result;
    }
    /**
         Retrieve a schema definition searching the factoryPlugins
         registered to this plugins manager
         params
         string schemaName
         returns
         | { jsonSchema
         | wzError NotFound
    */
    PluginsManager.prototype.getSchemaDefinition = function(schemaName) {
        if (verify.isNotEmpty(schemaName) === false) {
            return error(
                'InvalidArgument', 'getSchemaDefinition', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            );
        }
        // loog 'PluginsManager.getSchemaObject.schemaName: ' + schemaName
        var found = null,
            foundInPlugin = null,
            result = null;
        // all factoryPlugins are searched, last encountered results override the previous.
        var i, i_items=this.factoryPlugins, i_len=this.factoryPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.factoryPlugins[i];
            // loog 'searching wizzi schema definition', schemaName, ' in plugin ', item.getName()
            found = item.getSchemaDefinition(schemaName);
            ;
            if (found && found.__is_error) {
                return found;
            }
            // loog 'found', found
            if (found && verify.isObject(found)) {
                result = found;
                foundInPlugin = item.getFilename();
            }
        }
        if (!result) {
            var msg = 'getSchemaDefinition. Cannot find schema: ' + schemaName + '\n' + 'availables schemas: ' + this.availableSchemas().join(', ');
            log.error(msg)
            return error('NotFound', 'getSchemaDefinition', msg);
        }
        else {
            log.success('getSchemaDefinition. Found schema object: ' + schemaName + ' in plugin ' + foundInPlugin);
        }
        return result;
    }
    /**
         Get the list of schemas with a cheatsheet
         returns
         [
         {
         string name
         schema name
    */
    PluginsManager.prototype.getCheatsheetList = function() {
        return this.providedCheatsheetFolders;
    }
    /**
         Check if a wizzi schema has a cheatsheet
         params
         string schemaName
         returns
         true|false
    */
    PluginsManager.prototype.hasCheatsheetFolder = function(schemaName) {
        if (verify.isNotEmpty(schemaName) === false) {
            return error(
                'InvalidArgument', 'hasCheatsheetFolder', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            );
        }
        return this.availableCheatsheetFolders().indexOf(schemaName) > -1;
    }
    /**
         retrieve a cheatsheet folder searching the factoryPlugins
         registered to this plugins manager
         params
         string schemaName
         returns
         | api-ref wizzi.PackiFiles
         | wzError NotFound
    */
    PluginsManager.prototype.getCheatsheetFolder = function(schemaName, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'getCheatsheetFolder', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isNotEmpty(schemaName) === false) {
            return callback(error(
                'InvalidArgument', 'getCheatsheetFolder', { parameter: 'schemaName', message: 'The schemaName parameter must be a string. Received: ' + schemaName }
            ));
        }
        // loog 'PluginsManager.getCheatsheetFolder.schemaName: ' + schemaName
        
        var found = null,
            foundInPlugin = null,
            pluginVersion,
            result = null;
        // all factoryPlugins are searched, last matching encountered wins.
        var that = this;
        function doSearch(ndx) {
            var item = that.factoryPlugins[ndx];
            if (!item) {
                if (!result) {
                    var msg = 'getCheatsheet. Cannot find cheatsheet: ' + schemaName + '\n' + 'availables cheatsheet folders: ' + that.availableCheatsheetFolders().join(', ');
                    log.error(msg)
                    return callback(error('NotFound', 'getCheatsheetFolder', msg));
                }
                else {
                    log.success('getCheatsheet. Found cheatsheet: ' + schemaName + ' in plugin: ' + foundInPlugin + ', version:' + (pluginVersion || 'unknown'))
                    return callback(null, result);
                }
            }
            // loog 'searching cheatsheets folder for schema', schemaName, ' in module', item.getName()
            if (item.getCheatsheetFolder) {
                item.getCheatsheetFolder(schemaName, function(err, packiCheatsheetFolder) {
                    if (err) {
                        return callback(err);
                    }
                    // loog 'found', !!packiCheatsheetFolder
                    if (packiCheatsheetFolder) {
                        result = packiCheatsheetFolder;
                        foundInPlugin = item.getFilename();
                        if (verify.isFunction(item.getVersion)) {
                            pluginVersion = item.getVersion();
                        }
                    }
                    doSearch(ndx + 1)
                })
            }
            else {
                doSearch(ndx + 1)
            }
        }
        doSearch(0)
    }
    PluginsManager.prototype.getInfo = function() {
        var factoryPluginsInfo = [];
        var i, i_items=this.factoryPlugins, i_len=this.factoryPlugins.length, item;
        for (i=0; i<i_len; i++) {
            item = this.factoryPlugins[i];
            factoryPluginsInfo.push({
                packageName: item.packageName, 
                packagePath: item.packagePath, 
                provides: item.provides
             })
        }
        return {
                providedSchemas: this.providedSchemas, 
                providedModelTransformers: this.providedModelTransformers, 
                providedArtifactGenerators: this.providedArtifactGenerators, 
                providedWizzifiers: this.providedWizzifiers, 
                providedCheatsheetFolders: this.providedCheatsheetFolders, 
                extensionSchemaMap: this.extensionSchemaMap, 
                schemaRootTagMap: this.schemaRootTagMap, 
                artifactContentTypeMap: this.artifactContentTypeMap, 
                schemaArtifactsMap: this.schemaArtifactsMap, 
                schemaDefaulArtifactMap: this.schemaDefaulArtifactMap, 
                factoryPlugins: factoryPluginsInfo
             };
    }
    PluginsManager.prototype.mapIttfDocumentPathToSchema = function(ittfDocumentPath) {
        const filePathSchema = schemaFromFilePath(ittfDocumentPath);
        const wizziSchema = this.extensionSchemaMap[filePathSchema];
        return wizziSchema;
    }
    PluginsManager.prototype.mapIttfDocumentPathToDefaultArtifact = function(ittfDocumentPath) {
        const filePathSchema = schemaFromFilePath(ittfDocumentPath);
        return this.mapSchemaToDefaultArtifact(filePathSchema);
    }
    PluginsManager.prototype.mapIttfDocumentPathToPluginDependencies = function(ittfDocumentPath) {
        const filePathSchema = schemaFromFilePath(ittfDocumentPath);
        const wizziSchema = this.extensionSchemaMap[filePathSchema];
        if (this.providedSchemasExt[wizziSchema]) {
            const ret = [ "@wizzi/plugin." + wizziSchema ];
            const schemaExt = this.providedSchemasExt[wizziSchema];
            var i, i_items=schemaExt.dependencies, i_len=schemaExt.dependencies.length, dep;
            for (i=0; i<i_len; i++) {
                dep = schemaExt.dependencies[i];
                ret.push("@wizzi/plugin." + dep)
            }
            return ret;
        }
        else {
            return [];
        }
    }
    PluginsManager.prototype.mapExtensionToSchema = function(extension) {
        if (verify.isEmpty(extension)) {
            return undefined;
        }
        const filePathSchema = extension.startsWith('.') ? extension.substring(1) : extension;
        return this.extensionSchemaMap[filePathSchema];
    }
    PluginsManager.prototype.mapSchemaToDefaultArtifact = function(filePathSchema) {
        const wizziSchema = this.extensionSchemaMap[filePathSchema];
        return this.schemaDefaulArtifactMap[wizziSchema];
    }
    PluginsManager.prototype.getSchemaArtifacts = function(filePathSchema) {
        const wizziSchema = this.extensionSchemaMap[filePathSchema];
        return this.schemaArtifactsMap[wizziSchema];
    }
    PluginsManager.prototype.mapArtifactToContentType = function(artifactName) {
        return this.artifactContentTypeMap[artifactName];
    }
    PluginsManager.prototype.mapSchemaToRootTag = function(filePathSchema) {
        const wizziSchema = this.extensionSchemaMap[filePathSchema];
        return this.schemaRootTagMap[wizziSchema];
    }
    return PluginsManager;
})();

// For test - begin
var packagePathCache = {};
function resolveModule(pluginsBaseFolder, modulePath, callback) {
    
    resolvePackage(pluginsBaseFolder, (modulePath + "/package.json"), function(err, packagePath) {
        var metadata = {};
        var packageMetadata;
        if (!err) {
            try {
                packageMetadata = (packagePath && require(packagePath).plugin) || {};
            } 
            catch (ex) {
                return callback(error('PackageError', 'resolveModule', 'Error loading plugin package.json ' + packagePath + ', message: ' + ex.message));
            } 
        }
        (function(next) {
            if (err) {
                var mp = verify.endsWith(modulePath, '.js') ? modulePath : modulePath + '.js';
                resolvePackage(pluginsBaseFolder, mp, next);
            }
            else if (packagePath) {
                next(null, path.dirname(packagePath))
            }
            else {
                resolvePackage(pluginsBaseFolder, modulePath, next);
            }
        })(function(err, modulePath) {
            if (err) {
                return callback(err);
            }
            var moduleObject;
            try {
                // load the module now
                moduleObject = require(modulePath);
                // loog 'wizzi.services.pluginManager.resolveModule: modulePath, moduleObject', modulePath, moduleObject
            } 
            catch (ex) {
                return callback(error('ModuleError', 'resolveModule', 'Error loading plugin module ' + modulePath + ', message: ' + ex.message + '\n' + ex.stack));
            } 
            moduleObject.provides = (packageMetadata && packageMetadata.provides) || moduleObject.provides || [];
            moduleObject.consumes = (packageMetadata && packageMetadata.consumes) || moduleObject.consumes || [];
            moduleObject.packagePath = modulePath;
            callback(null, moduleObject);
        })
        ;
    })
}
function resolvePackage(pluginsBaseFolder, packagePath, callback) {
    
    var originalBase = pluginsBaseFolder;
    
    if (!packagePathCache.hasOwnProperty(pluginsBaseFolder)) {
        packagePathCache[pluginsBaseFolder] = {};
    }
    var cache = packagePathCache[pluginsBaseFolder];
    if (cache.hasOwnProperty(packagePath)) {
        return callback(null, cache[packagePath]);
    }
    
    // local folder plugin module
    if (packagePath[0] === "." || packagePath[0] === "/") {
        var newPath = path.resolve(pluginsBaseFolder, packagePath);
        exists(newPath, function(exists) {
            if (exists) {
                realpath(newPath, function(err, newPath) {
                    if (err) {
                        return callback(err);
                    }
                    cache[packagePath] = newPath;
                    return callback(null, newPath);
                })
            }
            else {
                return callback(error('ENOENT', 'resolvePackage', "Can't find '" + newPath + "' ('" + packagePath + "' relative to '" + originalBase + "')"));
            }
        })
    }
    // npm (node_modules folder) plugin module
    else {
        tryNext(pluginsBaseFolder);
    }
    function tryNext(base) {
        if (base == "/") {
            return callback(error('ENOENT', 'resolvePackage', "Can't find '" + packagePath + "' relative to '" + originalBase + "'"));
        }
        var newPath = path.resolve(base, "node_modules", packagePath);
        exists(newPath, function(exists) {
            if (exists) {
                realpath(newPath, function(err, newPath) {
                    if (err) {
                        return callback(err);
                    }
                    cache[packagePath] = newPath;
                    return callback(null, newPath);
                })
            }
            else {
                var nextBase = path.resolve(base, '..');
                if (nextBase === base) {
                    tryNext("/");
                }
                else {
                    tryNext(nextBase);
                }
            }
        })
    }
}
// For test - end
function schemaFromFilePath(filePath) {
    const pf = parseFilePath(filePath);
    if (pf.isIttfDocument) {
        return pf.schema;
    }
    return undefined;
}
function parseFilePath(filePath) {
    const nameParts = path.basename(filePath).split('.');
    if (nameParts[nameParts.length - 1] === 'ittf') {
        return {
                isIttfDocument: true, 
                schema: nameParts[nameParts.length - 2], 
                seedname: nameParts.slice(0, -2).join('.')
             };
    }
    else {
        return {
                isIttfDocument: false, 
                schema: nameParts[nameParts.length - 1], 
                seedname: nameParts.slice(0, -1).join('.')
             };
    }
}
module.exports = {
    createManager: function createManager(options, callback) {
        if (typeof(callback) !== 'function') {
            throw new Error(
                error('InvalidArgument', 'createManager', 'The callback parameter must be a function. Received: ' + callback)
            );
        };
        if (verify.isObject(options) === false) {
            return callback(error(
                'InvalidArgument', 'createManager', { parameter: 'options', message: 'The options parameter must be an object. Received: ' + options }
            ));
        }
        var pm = new PluginsManager();
        pm.initialize(options, (err, result) => {
            if (err) {
                console.log("[31m%s[0m", err);
                return callback(err);
            }
            // test
            // loog 'extensionSchemaMap', result.extensionSchemaMap
            // loog 'schemaDefaulArtifactMap', result.schemaDefaulArtifactMap
            // loog 'schemaArtifactsMap', result.schemaArtifactsMap
            return callback(null, result);
        }
        )
    }, 
    PluginsManager: PluginsManager, 
    resolveModule: resolveModule, 
    resolvePackage: resolvePackage
 };
/**
  params
    string code
      # the error name or number
    string method
    string message
      # optional
    { innerError
      # optional
*/
function error(code, method, message, innerError) {
    var parameter = null;
    if (verify.isObject(message)) {
        parameter = message.parameter;
        message = message.message;
    }
    return verify.error(innerError, {
        name: ( verify.isNumber(code) ? 'Err-' + code : code ),
        method: 'wizzi@0.8.46.pluginsManager.' + method,
        parameter: parameter,
        sourcePath: __filename
    }, message || 'Error message unavailable');
}